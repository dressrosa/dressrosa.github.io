{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/head.jpg","path":"images/head.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/rain.ico","path":"images/rain.ico","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1492500847107},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1492500847107},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1492500847109},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1492500847107},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1492500847109},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1492500847109},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1492500847111},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1492500847110},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1492500847111},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1492500847110},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1492500847112},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1492500847111},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1492500847113},{"_id":"themes/next/_config.yml","hash":"dcaa190c26eb23fa757bd66e6201ff9fc1f45b8f","modified":1492504961024},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1492500847113},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1492500847174},{"_id":"source/_posts/inject-static-variable-in-spring.md","hash":"e75e75371f409a4a31d3ef17eceed7b0abed3d28","modified":1492500847103},{"_id":"source/_posts/array-to-list.md","hash":"2e24d4e0e98e90c39568024e862be607ce085794","modified":1492506642297},{"_id":"source/_posts/mysql-transfer.md","hash":"bb2e7fff1fe80d4f2ec05d88e0cc9a9e40bea9f5","modified":1492502482332},{"_id":"source/_posts/something-about-finally.md","hash":"7dea0765efcefa35000d0b025d74168139ed57b3","modified":1492500847103},{"_id":"source/_posts/save-emoji-in-mysql.md","hash":"e2f1d2c341ea56b1794b155b167913d67c4f1846","modified":1492502045460},{"_id":"source/_posts/something-about-interrupt.md","hash":"c32e7a1122e4ca3a13ecc2e11e20013476590527","modified":1492500847104},{"_id":"source/_posts/transfer-params.md","hash":"b3647b7d78fbaefb37c900876e667f08db4063f1","modified":1492502972100},{"_id":"source/_posts/summary-of-cdl-cb.md","hash":"80807164d8ed490c7105de2ecbbd45820c45347f","modified":1492501666108},{"_id":"source/categories/index.md","hash":"d29381e52aa3227b8ab93da66cbe429bd555ba96","modified":1492500847105},{"_id":"source/about/index.md","hash":"3c4fb13efc267e7676110c836dc74139336fcfd7","modified":1492500847104},{"_id":"source/tags/index.md","hash":"cf9bdd5606f4aba76465bd85b4d089cc4db3524d","modified":1492500847105},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1492500847108},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1492500847108},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1492500847113},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1492500847114},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1492500847114},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1492500847115},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1492500847116},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1492500847115},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1492500847116},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1492500847116},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1492500847117},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1492500847117},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1492500847118},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1492500847118},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1492500847118},{"_id":"themes/next/layout/_layout.swig","hash":"54366831bac735c5916610c252a6b12550412be2","modified":1492500847121},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1492500847170},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1492500847164},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1492500847170},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1492500847171},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1492500847171},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1492500847173},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1492500847173},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1492500847181},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1492500847182},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1492500847441},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1492500847441},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1492500847442},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847354},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492500847120},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1492500847121},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1492500847122},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1492500847123},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1492500847134},{"_id":"themes/next/layout/_macro/post.swig","hash":"eb790c697a8101df6bef039043bd0b338b5c312c","modified":1492500847125},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1492500847134},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1492500847135},{"_id":"themes/next/layout/_partials/comments.swig","hash":"cd74d7d0aa2097de0e73e8e53cca5d022cec8c43","modified":1492500847135},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1492500847136},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1492500847136},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1492500847137},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1492500847138},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1492500847139},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1492500847139},{"_id":"themes/next/layout/_partials/search.swig","hash":"109b3d3403c72ac09926e35a1d00c6d36cc4f7fa","modified":1492500847140},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1492500847145},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1492500847145},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1492500847146},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1492500847164},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1492500847353},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492500847355},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492500847358},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492500847356},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492500847358},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492500847357},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492500847357},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492500847360},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492500847359},{"_id":"themes/next/source/images/head.jpg","hash":"af986a7201e06d9b06951b3990714db9113b9470","modified":1492500847361},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492500847360},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492500847361},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492500847362},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492500847362},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492500847363},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492500847362},{"_id":"themes/next/source/images/rain.ico","hash":"170ad98dee7f7fa7f2f3148d2338dedb6e3883dd","modified":1492500847363},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1492500847183},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1492500847195},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1492500847195},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1492500847196},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1492500847198},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1492500847199},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847148},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847147},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847320},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847321},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847322},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847351},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492500847353},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1492500847120},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1492500847119},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1492500847137},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1492500847138},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1492500847141},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1492500847141},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1492500847142},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1492500847142},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1492500847143},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1492500847143},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1492500847144},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1492500847146},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1492500847148},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"8b34af99cb673853fd948c02d07eb11eb3fb41b4","modified":1492500847151},{"_id":"themes/next/layout/_scripts/third-party/exturl.swig","hash":"25102cdf10fb67ec7fc27d01f361c76c662a012a","modified":1492500847160},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"03d259066399c1eb4a436ea4e5e7a4802426d72c","modified":1492500847157},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1492500847161},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1492500847162},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1492500847163},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1492500847163},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1492500847162},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1492500847321},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1492500847322},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1492500847350},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1492500847351},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1492500847352},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1492500847320},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492500847371},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492500847373},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492500847392},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1492500847391},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1492500847395},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1492500847398},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1492500847401},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1492500847401},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1492500847400},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492500847402},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1492500847403},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1492500847429},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1492500847438},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1492500847434},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1492500847439},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1492500847439},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1492500847420},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1492500847421},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1492500847422},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1492500847424},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1492500847422},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1492500847425},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1492500847424},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1492500847364},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1492500847365},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1492500847365},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1492500847366},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1492500847366},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13d5396d2c5803cdd9732c727f5f2308b47368c","modified":1492500847367},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1492500847367},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1492500847369},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1492500847369},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1492500847420},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1492500847152},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1492500847153},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1492500847153},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1492500847154},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1492500847154},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1492500847155},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1492500847155},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1492500847155},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1492500847156},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1492500847157},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1492500847158},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1492500847158},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1492500847159},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1492500847159},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1492500847160},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1492500847204},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1492500847201},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1492500847316},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1492500847201},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1492500847205},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1492500847204},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1492500847259},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1492500847304},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1492500847317},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1492500847318},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1492500847317},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1492500847318},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1492500847319},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1492500847324},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1492500847324},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1492500847325},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1492500847326},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1492500847326},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492500847327},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1492500847327},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1492500847342},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1492500847342},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1492500847343},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1492500847344},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1492500847344},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1492500847346},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dd763e86a3bfd9820e49cffce0d9c593489af9d4","modified":1492500847347},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1492500847347},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1492500847348},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1492500847348},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1492500847349},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1492500847399},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492500847399},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492500847375},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492500847376},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492500847377},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492500847376},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492500847379},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492500847379},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1492500847389},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1492500847390},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1492500847390},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1492500847404},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492500847404},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1492500847405},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1492500847426},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1492500847427},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1492500847368},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492500847418},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492500847419},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1492500847436},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1492500847206},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1492500847207},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1492500847207},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1492500847218},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1492500847219},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1492500847209},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1492500847208},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1492500847208},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1492500847220},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1492500847251},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1492500847251},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1492500847257},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1492500847257},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1492500847258},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1492500847274},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1492500847272},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1492500847273},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1492500847275},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1492500847274},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1492500847275},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1492500847276},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1492500847276},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1492500847277},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1492500847278},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1492500847278},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1492500847282},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1492500847278},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1492500847304},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1492500847305},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1492500847311},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1492500847311},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1492500847310},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1492500847312},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1492500847312},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1492500847313},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1492500847314},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1492500847313},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1492500847314},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1492500847314},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1492500847283},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1492500847315},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1492500847315},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1492500847284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1492500847286},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1492500847285},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1492500847286},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1492500847298},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1492500847298},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1492500847299},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1492500847299},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1492500847336},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1492500847337},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1492500847346},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492500847386},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1492500847386},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1492500847387},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1492500847388},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1492500847388},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1492500847387},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492500847408},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492500847411},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492500847417},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1492500847372},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1492500847415},{"_id":"public/categories/index.html","hash":"e139bef804c1de075555a23f13e4271aa86490c8","modified":1492506657254},{"_id":"public/about/index.html","hash":"ba9df492c27016947065af585b19c74852a0e7f4","modified":1492506657254},{"_id":"public/tags/index.html","hash":"f48f9c573ac40faecf3da173c054ace5e03cc6fa","modified":1492506657270},{"_id":"public/archives/index.html","hash":"e22debfcd77317069cb0bf512623a138cb9d707f","modified":1492506657270},{"_id":"public/archives/2017/index.html","hash":"45628c97916a2970d2a487f5f6164b4f148febf6","modified":1492506657270},{"_id":"public/archives/2017/03/index.html","hash":"34016166ed1adbb8d6da9b3df9fa3051ebcc2153","modified":1492506657270},{"_id":"public/archives/2017/04/index.html","hash":"5d56568479972f6f681e6eb8477cb0d31ccebec3","modified":1492506657270},{"_id":"public/categories/spring/index.html","hash":"26cd0d8f74854270e54361c53be895bae2c9affe","modified":1492506657270},{"_id":"public/categories/mysql/index.html","hash":"a1755887571fed503fe962bc0d861fd45ebd1480","modified":1492506657270},{"_id":"public/categories/java/index.html","hash":"e4ee3e1762b5c861716aba779bc72dc275c4cea4","modified":1492506657270},{"_id":"public/categories/js/index.html","hash":"c2b3e01414c02f1f82eb3f7cc856eda09c1f81e6","modified":1492506657270},{"_id":"public/tags/spring/index.html","hash":"0abd5208edbc155083edec2c4b70ce49f5aab5e5","modified":1492506657270},{"_id":"public/tags/static/index.html","hash":"86dcbaa00cab1ac4661b1db49997da00f3d61d30","modified":1492506657270},{"_id":"public/tags/mysql/index.html","hash":"c307b8a7fae4a9caab3ba32dd2f5e77cf153fcb9","modified":1492506657270},{"_id":"public/tags/finally/index.html","hash":"b201ef1822b35dba638eaab6527c560bc9157dc0","modified":1492506657270},{"_id":"public/tags/interrupt/index.html","hash":"3c8b113fe554ec008ca5225f23d390416ec649e7","modified":1492506657270},{"_id":"public/tags/list/index.html","hash":"709e83480afa5d89d097e0496f2bb9fba5652190","modified":1492506657270},{"_id":"public/tags/ajax/index.html","hash":"d8ba332336ba7364d2860e0168770c40c6f0d7b7","modified":1492506657270},{"_id":"public/tags/java/index.html","hash":"ed363b67698e45a00a4a6fc790bdb1163fd778a6","modified":1492506657270},{"_id":"public/2017/04/18/transfer-params/index.html","hash":"911c8a2e6ef13745c5870823b568ccbe30f3206f","modified":1492506657270},{"_id":"public/2017/04/18/array-to-list/index.html","hash":"d3c92788348e25b8dd57dcf5d5c2f466cf44b1dc","modified":1492506657270},{"_id":"public/2017/04/18/mysql-transfer/index.html","hash":"81c4d8bed233dfee2395663d243ca4461b30a13a","modified":1492506657270},{"_id":"public/2017/04/18/save-emoji-in-mysql/index.html","hash":"3fbc9f51736d4d476b22ca78ff0aa7018388b546","modified":1492506657270},{"_id":"public/2017/04/18/summary-of-cdl-cb/index.html","hash":"9e1478fd27a71b61d3722b888fc13e275e3211bf","modified":1492506657270},{"_id":"public/2017/03/20/inject-static-variable-in-spring/index.html","hash":"b31a2a68297f05061ceb2e1accdb8aa0dffece84","modified":1492506657270},{"_id":"public/2017/03/20/something-about-interrupt/index.html","hash":"719331ced677482ce8de154aebb484113f5477c5","modified":1492506657270},{"_id":"public/2017/03/19/something-about-finally/index.html","hash":"8b3bd768e727b82186a59bac99cf0c2819eb489c","modified":1492506657270},{"_id":"public/index.html","hash":"562d3a47ea16432c4a14809f2c9870a72fd7027f","modified":1492506657270},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492506657301},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492506657301},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492506657301},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492506657301},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492506657301},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492506657301},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492506657301},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492506657301},{"_id":"public/images/head.jpg","hash":"af986a7201e06d9b06951b3990714db9113b9470","modified":1492506657301},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492506657301},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492506657301},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492506657301},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492506657301},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492506657301},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492506657301},{"_id":"public/images/rain.ico","hash":"170ad98dee7f7fa7f2f3148d2338dedb6e3883dd","modified":1492506657301},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492506657301},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492506657301},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492506657301},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492506657301},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492506657301},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492506657301},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492506657301},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492506657301},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492506657301},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492506657301},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492506657914},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492506657929},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492506657929},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492506657929},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1492506657929},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1492506657929},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1492506657929},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1492506657929},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492506657929},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1492506657929},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1492506657929},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1492506657929},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492506657929},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492506657929},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492506657929},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1492506657929},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1492506657929},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492506657929},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492506657929},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492506657929},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1492506657929},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492506657929},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1492506657929},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492506657929},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492506657929},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492506657929},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492506657929},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492506657929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492506657929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492506657929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492506657929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492506657929},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492506657929},{"_id":"public/css/main.css","hash":"db1248491aea0626cc83bc7395cd275bcdef6a5e","modified":1492506657929},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492506657929},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492506657929},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492506657929},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492506657929},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1492506657929},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492506657929},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492506657929},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1492506657929},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492506657929},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492506657929},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492506657929},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492506657929},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492506657929},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1492506657960}],"Category":[{"name":"spring","_id":"cj1nbxdu20004tojt60740xlh"},{"name":"mysql","_id":"cj1nbxduh000atojt54qpxsii"},{"name":"java","_id":"cj1nbxduh000ftojtv9l1r6m4"},{"name":"js","_id":"cj1nbxdux000ytojtuuqvklcy"}],"Data":[],"Page":[{"title":"categories","date":"2017-03-19T08:56:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-19 16:56:06\ntype: \"categories\"\n---\n","updated":"2017-04-18T07:34:07.105Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj1nbxdu20001tojtibv068mt","content":"","excerpt":"","more":""},{"title":"","date":"2017-03-19T08:42:50.000Z","_content":"<center style=\"font-size:x-large\">java小狗,故事和酒</center>\n\n\n","source":"about/index.md","raw":"---\ntitle:\ndate: 2017-03-19 16:42:50\n---\n<center style=\"font-size:x-large\">java小狗,故事和酒</center>\n\n\n","updated":"2017-04-18T07:34:07.104Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1nbxdu20003tojte23dgjix","content":"<center style=\"font-size:x-large\">java小狗,故事和酒</center>\n\n\n","excerpt":"","more":"<center style=\"font-size:x-large\">java小狗,故事和酒</center>\n\n\n"},{"title":"tags","date":"2017-03-19T08:52:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-19 16:52:34\ntype: \"tags\"\n---\n","updated":"2017-04-18T07:34:07.105Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1nbxduh0007tojtijyrh15g","content":"","excerpt":"","more":""}],"Post":[{"title":"spring注入static变量","date":"2017-03-20T13:04:43.000Z","_content":"\n在spring中默认是不能注入static变量的,因为static是类变量,而spring是基于实例对象进行注入的.  \n但是我们有时候需要static的变量进行操作.比如我们经常使用的jedis,如果每次调用jedis的时候都要实例化一遍,是非常麻烦的.  \n<!--more-->\n解决办法如下:\n1. 我们先通过set方法注入一个jedisPool对象 ,然后再将这个对象赋值给static变量pool,于是我们就可以使用 pool了\n```\n@Component\npublic class JedisUtils {\n\tprivate static JedisPool pool;\n\n\t@Autowired\n\t@Qualifier(\"jedisPool\")\n\tpublic void setPool(JedisPool jedisPool) {\n\t\tpool = jedisPool;\n\t}\n}\n```\n\n\n2. 这是我在框架里面看到的.通过设置一个全局的applicationContext变量,在spring启动的时候就加载,然后利用context加载static变量\n\n```\n@Component\n@Lazy(false)//启动便加载\npublic class SpringBeanUtils implements ApplicationContextAware, DisposableBean {\n\tprivate static ApplicationContext applicationContext = null;\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getBean(String name) {\n\t\treturn (T) applicationContext.getBean(name);\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\tpublic static <T> T getBean(Class<T> requiredType) {\n\t\treturn applicationContext.getBean(requiredType);\n\t}\n\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext arg0) throws BeansException {\n\t\tSpringBeanUtils.applicationContext = arg0;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tapplicationContext = null;\n\t}\n}\n```\n\n然后我们这样:\n\n```\n//@Component 这时候就不能有这个注解了,因为已经无需注入了\npublic class JedisUtils {\n\tprivate static JedisPool pool=SpringBeanUtils.getBean(JedisPool.class);\n}\n```\n","source":"_posts/inject-static-variable-in-spring.md","raw":"---\ntitle: spring注入static变量\ndate: 2017-03-20 21:04:43\ncategories: spring\ntags: \n\t- spring \n\t- static\n---\n\n在spring中默认是不能注入static变量的,因为static是类变量,而spring是基于实例对象进行注入的.  \n但是我们有时候需要static的变量进行操作.比如我们经常使用的jedis,如果每次调用jedis的时候都要实例化一遍,是非常麻烦的.  \n<!--more-->\n解决办法如下:\n1. 我们先通过set方法注入一个jedisPool对象 ,然后再将这个对象赋值给static变量pool,于是我们就可以使用 pool了\n```\n@Component\npublic class JedisUtils {\n\tprivate static JedisPool pool;\n\n\t@Autowired\n\t@Qualifier(\"jedisPool\")\n\tpublic void setPool(JedisPool jedisPool) {\n\t\tpool = jedisPool;\n\t}\n}\n```\n\n\n2. 这是我在框架里面看到的.通过设置一个全局的applicationContext变量,在spring启动的时候就加载,然后利用context加载static变量\n\n```\n@Component\n@Lazy(false)//启动便加载\npublic class SpringBeanUtils implements ApplicationContextAware, DisposableBean {\n\tprivate static ApplicationContext applicationContext = null;\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T getBean(String name) {\n\t\treturn (T) applicationContext.getBean(name);\n\t}\n\n\t/**\n\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.\n\t */\n\tpublic static <T> T getBean(Class<T> requiredType) {\n\t\treturn applicationContext.getBean(requiredType);\n\t}\n\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext arg0) throws BeansException {\n\t\tSpringBeanUtils.applicationContext = arg0;\n\t}\n\n\t@Override\n\tpublic void destroy() throws Exception {\n\t\tapplicationContext = null;\n\t}\n}\n```\n\n然后我们这样:\n\n```\n//@Component 这时候就不能有这个注解了,因为已经无需注入了\npublic class JedisUtils {\n\tprivate static JedisPool pool=SpringBeanUtils.getBean(JedisPool.class);\n}\n```\n","slug":"inject-static-variable-in-spring","published":1,"updated":"2017-04-18T07:34:07.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxdtm0000tojtir8yspyu","content":"<p>在spring中默认是不能注入static变量的,因为static是类变量,而spring是基于实例对象进行注入的.<br>但是我们有时候需要static的变量进行操作.比如我们经常使用的jedis,如果每次调用jedis的时候都要实例化一遍,是非常麻烦的.<br><a id=\"more\"></a><br>解决办法如下:</p>\n<ol>\n<li><p>我们先通过set方法注入一个jedisPool对象 ,然后再将这个对象赋值给static变量pool,于是我们就可以使用 pool了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component</div><div class=\"line\">public class JedisUtils &#123;</div><div class=\"line\">\tprivate static JedisPool pool;</div><div class=\"line\"></div><div class=\"line\">\t@Autowired</div><div class=\"line\">\t@Qualifier(&quot;jedisPool&quot;)</div><div class=\"line\">\tpublic void setPool(JedisPool jedisPool) &#123;</div><div class=\"line\">\t\tpool = jedisPool;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>这是我在框架里面看到的.通过设置一个全局的applicationContext变量,在spring启动的时候就加载,然后利用context加载static变量</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component</div><div class=\"line\">@Lazy(false)//启动便加载</div><div class=\"line\">public class SpringBeanUtils implements ApplicationContextAware, DisposableBean &#123;</div><div class=\"line\">\tprivate static ApplicationContext applicationContext = null;</div><div class=\"line\">\t</div><div class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">\tpublic static &lt;T&gt; T getBean(String name) &#123;</div><div class=\"line\">\t\treturn (T) applicationContext.getBean(name);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</div><div class=\"line\">\t\treturn applicationContext.getBean(requiredType);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void setApplicationContext(ApplicationContext arg0) throws BeansException &#123;</div><div class=\"line\">\t\tSpringBeanUtils.applicationContext = arg0;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void destroy() throws Exception &#123;</div><div class=\"line\">\t\tapplicationContext = null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//@Component 这时候就不能有这个注解了,因为已经无需注入了</div><div class=\"line\">public class JedisUtils &#123;</div><div class=\"line\">\tprivate static JedisPool pool=SpringBeanUtils.getBean(JedisPool.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>在spring中默认是不能注入static变量的,因为static是类变量,而spring是基于实例对象进行注入的.<br>但是我们有时候需要static的变量进行操作.比如我们经常使用的jedis,如果每次调用jedis的时候都要实例化一遍,是非常麻烦的.<br>","more":"<br>解决办法如下:</p>\n<ol>\n<li><p>我们先通过set方法注入一个jedisPool对象 ,然后再将这个对象赋值给static变量pool,于是我们就可以使用 pool了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component</div><div class=\"line\">public class JedisUtils &#123;</div><div class=\"line\">\tprivate static JedisPool pool;</div><div class=\"line\"></div><div class=\"line\">\t@Autowired</div><div class=\"line\">\t@Qualifier(&quot;jedisPool&quot;)</div><div class=\"line\">\tpublic void setPool(JedisPool jedisPool) &#123;</div><div class=\"line\">\t\tpool = jedisPool;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>这是我在框架里面看到的.通过设置一个全局的applicationContext变量,在spring启动的时候就加载,然后利用context加载static变量</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component</div><div class=\"line\">@Lazy(false)//启动便加载</div><div class=\"line\">public class SpringBeanUtils implements ApplicationContextAware, DisposableBean &#123;</div><div class=\"line\">\tprivate static ApplicationContext applicationContext = null;</div><div class=\"line\">\t</div><div class=\"line\">\t@SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">\tpublic static &lt;T&gt; T getBean(String name) &#123;</div><div class=\"line\">\t\treturn (T) applicationContext.getBean(name);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t/**</div><div class=\"line\">\t * 从静态变量applicationContext中取得Bean, 自动转型为所赋值对象的类型.</div><div class=\"line\">\t */</div><div class=\"line\">\tpublic static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) &#123;</div><div class=\"line\">\t\treturn applicationContext.getBean(requiredType);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void setApplicationContext(ApplicationContext arg0) throws BeansException &#123;</div><div class=\"line\">\t\tSpringBeanUtils.applicationContext = arg0;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void destroy() throws Exception &#123;</div><div class=\"line\">\t\tapplicationContext = null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//@Component 这时候就不能有这个注解了,因为已经无需注入了</div><div class=\"line\">public class JedisUtils &#123;</div><div class=\"line\">\tprivate static JedisPool pool=SpringBeanUtils.getBean(JedisPool.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"mysql和转账的实现","date":"2017-04-18T08:00:32.000Z","_content":"\n做个平台间余额的互相转账,重点在于如何解决并发访问数据错乱的问题.比如俩个人之间同时都在给对方转账.以及很多人同时给一个人转账.  \n\n必须保证数据库里面的数据是随时正确的.\n我本没有想到过这一层面,被提醒的.\n比如有个转账的方法transfer(业务逻辑主要写在这里) \n<!--more-->\n1.首先想到的用多线程加锁,看了资料.是可以实现,但是问题是对方法加锁或者代码块加锁,那么每次只能执行一个线程,a转给b执行了,可c却不能同时转给d,二者根本不会影响啊.所以多线程白看了. \n\n2.然后就取决在数据库上面了.用的是mysql innodb,所以找了这方面锁的知识.\n这篇博客写的不错,感谢:[http://www.cnblogs.com/Arlen/articles/1756616.html](http://www.cnblogs.com/Arlen/articles/1756616.html) \n\n结合其他的参考学习,我总结了一下: \n\nmysql innodb主要有表级锁和行级锁,转账之间不能互相影响,所以选择行级锁. \n\n行级锁有两种:共享锁和排他锁 \n\n如何加锁:\n- 共享锁:select xxxx lock in share mode \n- 排他锁:select xxx for update \n                \n顾名思义共享锁的重点在于多个事务可以同时共享同一资源上的共享锁,如果一个事务获取了一个数据的共享锁,那么别的事务也可以再获取这个锁.获取共享锁的事务可以对数据进行读操作.,读完了就释放. \n\n排他锁就是一旦事务获取了这个锁,他就必须持有这个锁到结束,并不准其他事务获取这个锁.持有排他锁的事务可以对数据进行写操作.\n \n \n然后明确一点一个事务在一个时刻里只能拥有一把锁\n\n在转账时如果我先查找用户的账户信息,如果我用共享锁的话,别的事务也可以共享这个锁,这时候就会产生死锁. \n\n这里的死锁产生的原因在于: \n\n当A向B转账的时候,B也在向C转账,A开始转账的时候获取A,B账户信息,A开始转账的时候获取C,B账户信息,这里是共享锁,然后我需要对账户进行更新,这时候问题就出现了; \n\n假如A转账在准备更新B的信息时,发现B转账也准备更新B,A就等B释放共享锁,B也等A在释放共享锁,也就产生死锁了. \n\n\n\n如果没有,那么在查询完后,A事务就释放了共享锁,然后这时候别的B事务就可以获取这个用户账户信息的共享锁, \n\n假如B获取了.那A了刚刚查出来了用户信息,想改的时候(mysql修改默认加上排他锁)发现资源又被锁了.给别人挪用了.别人对他干了啥我哪知道,以后数据就肯能和我刚读出来的不一样了. \n\n\n排它锁事务一旦获取了就一直到事务结束都会拥有这把锁,这样就很好的杜绝了数据被修改的可能性.那么这时候重点就在于这里的事务怎么开始和啥时候结束了.我的项目用的是springMVC,就是spring的事务是怎么确定的. \n\n这篇博客写的不错,感谢:   [http://www.cnblogs.com/davidwang456/p/3832949.html](http://www.cnblogs.com/davidwang456/p/3832949.html) \n\n这里不需要知道spring事务的深层原理,只需知道spring事务是在进入sercice层执行方法的时候开始定义一个事务,然后在这个方法结束后事务才结束(事务提交).就是说在这个方法里面不管调用了多少个dao方法,都不会影响锁的丢失.也就是说我进入方法查询用户加了排他锁,在这个方法结束之前该数据就是安全的.\n\n好了理论说完了,看程序了:\n这是我的service方法\n\n```\n@Transactional(readOnly=false)\n    public int transfer(String userId, String money, String remarks,\n            String otherId) {\n        HcUser me = this.userDao.getUserForUpdate(userId);//获取用户信息\n        HcUser other = this.userDao.getUserForUpdate(otherId);//获取用户信息\n      //这里写转账的一些操作(修改/插入等)\n        return 0;\n    }\n```\n\n这是mybatis的sql:\n\n```\n<select id=\"getUserForUpdate\" parameterType=\"java.lang.String\" resultType=\"HcUser\">\n    select * \n    from hc_user \n    where id=#{id}\n    for update <!-- 这里加锁-->\n</select>\n```\n\n\n写的是web项目,需要在浏览器敲地址测试,但是无法实现多线程,于是可以这样:\n用java写访问url的程序(网上找的拉):\n\n```\npackage examples;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport org.apache.commons.lang3.RandomUtils;\n\npublic class TEST {\n\n    public static void main(String args[]) {\n        for(int i = 0;i <400; i++) {//设置400个线程\n            String money =RandomUtils.nextInt(1, 5)+\"\";\n            System.out.println(money);\n            //模拟几个用户\n            String userId = \"2aefe0c4c88f4ea1b39a68b6e33208d8\";\n            String otherId=\"1bb4fc7d35c342a3a19bc23171aa3d22\";\n            String userId1=\"1b638bd7dbb445a3bfe1efbec1a61e4e\";\n            String userId2=\"551926783cb64524b3127ec02529d371\";\n            Account a = null;\n        //设置不同的转账\n            if(\"1\".equals(money)) {\n                 a = new Account(money,userId,otherId);\n            }\n            else if(\"2\".equals(money)) {\n                 a = new Account(money,userId1,userId);\n            }else if(\"3\".equals(money)) {\n                 a = new Account(money,userId2,userId);\n            }\n            else {\n                 a = new Account(money,userId1,otherId);\n            }\n            Thread t = new Thread(a);\n            t.start();\n        }\n    }\n    static class Account implements Runnable {\n        String money = \"0\";\n        String userId = \"\";\n        String otherId=\"\";\n        public Account(String money,String userId,String otherId) {\n            this.money = money;\n            this.otherId = otherId;\n            this.userId = userId;\n        }\n\n        @Override\n        public void run() {\n            long begintime = System.currentTimeMillis();\n              try {\n               URL url = new URL(\"http:xxx?userId=\"\n                       +userId+\"&otherId=\"+otherId+\"&remarks=xxx\"\n                       +\"&money=\"+money);\n               HttpURLConnection urlcon = (HttpURLConnection)url.openConnection();\n               urlcon.connect();         //获取连接\n               InputStream is = urlcon.getInputStream();\n               BufferedReader buffer = new BufferedReader(new InputStreamReader(is));\n               StringBuffer bs = new StringBuffer();\n               String l = null;\n               while((l=buffer.readLine())!=null){\n                   bs.append(l).append(\"/n\");\n               }\n               System.out.println(bs.toString());//打印出信息\n\n               System.out.println(\"总共执行时间为：\"+(System.currentTimeMillis()-begintime)+\"毫秒\");\n            }catch(IOException e){\n               System.out.println(e);\n           }\n        }\n}\n}\n```\n\n这样写的程序可能出现有两个线程同时进行A给B转账,请先不要在意这种情况.\n这是我数据库账户初始值,每人设置100:\n\n1,在不加锁的情况下,跑完后:\n\n总额变小了扇\n2,加了共享锁,跑完后:\n\n总额是对的,但是报错了:\nDeadlock found when trying to get lock; try restarting transaction;\n产生死锁了,但是mysql会自己强制性重启事务,所以不会一直死锁下去,程序之后还会运行.\n3加了排他锁后:\n\n没有错误,正确运行\n\n这样就可以保证转账正确运行了,","source":"_posts/mysql-transfer.md","raw":"---\ntitle: mysql和转账的实现\ndate: 2017-04-18 16:00:32\ncategories: mysql\ntags: \n\t- mysql\n---\n\n做个平台间余额的互相转账,重点在于如何解决并发访问数据错乱的问题.比如俩个人之间同时都在给对方转账.以及很多人同时给一个人转账.  \n\n必须保证数据库里面的数据是随时正确的.\n我本没有想到过这一层面,被提醒的.\n比如有个转账的方法transfer(业务逻辑主要写在这里) \n<!--more-->\n1.首先想到的用多线程加锁,看了资料.是可以实现,但是问题是对方法加锁或者代码块加锁,那么每次只能执行一个线程,a转给b执行了,可c却不能同时转给d,二者根本不会影响啊.所以多线程白看了. \n\n2.然后就取决在数据库上面了.用的是mysql innodb,所以找了这方面锁的知识.\n这篇博客写的不错,感谢:[http://www.cnblogs.com/Arlen/articles/1756616.html](http://www.cnblogs.com/Arlen/articles/1756616.html) \n\n结合其他的参考学习,我总结了一下: \n\nmysql innodb主要有表级锁和行级锁,转账之间不能互相影响,所以选择行级锁. \n\n行级锁有两种:共享锁和排他锁 \n\n如何加锁:\n- 共享锁:select xxxx lock in share mode \n- 排他锁:select xxx for update \n                \n顾名思义共享锁的重点在于多个事务可以同时共享同一资源上的共享锁,如果一个事务获取了一个数据的共享锁,那么别的事务也可以再获取这个锁.获取共享锁的事务可以对数据进行读操作.,读完了就释放. \n\n排他锁就是一旦事务获取了这个锁,他就必须持有这个锁到结束,并不准其他事务获取这个锁.持有排他锁的事务可以对数据进行写操作.\n \n \n然后明确一点一个事务在一个时刻里只能拥有一把锁\n\n在转账时如果我先查找用户的账户信息,如果我用共享锁的话,别的事务也可以共享这个锁,这时候就会产生死锁. \n\n这里的死锁产生的原因在于: \n\n当A向B转账的时候,B也在向C转账,A开始转账的时候获取A,B账户信息,A开始转账的时候获取C,B账户信息,这里是共享锁,然后我需要对账户进行更新,这时候问题就出现了; \n\n假如A转账在准备更新B的信息时,发现B转账也准备更新B,A就等B释放共享锁,B也等A在释放共享锁,也就产生死锁了. \n\n\n\n如果没有,那么在查询完后,A事务就释放了共享锁,然后这时候别的B事务就可以获取这个用户账户信息的共享锁, \n\n假如B获取了.那A了刚刚查出来了用户信息,想改的时候(mysql修改默认加上排他锁)发现资源又被锁了.给别人挪用了.别人对他干了啥我哪知道,以后数据就肯能和我刚读出来的不一样了. \n\n\n排它锁事务一旦获取了就一直到事务结束都会拥有这把锁,这样就很好的杜绝了数据被修改的可能性.那么这时候重点就在于这里的事务怎么开始和啥时候结束了.我的项目用的是springMVC,就是spring的事务是怎么确定的. \n\n这篇博客写的不错,感谢:   [http://www.cnblogs.com/davidwang456/p/3832949.html](http://www.cnblogs.com/davidwang456/p/3832949.html) \n\n这里不需要知道spring事务的深层原理,只需知道spring事务是在进入sercice层执行方法的时候开始定义一个事务,然后在这个方法结束后事务才结束(事务提交).就是说在这个方法里面不管调用了多少个dao方法,都不会影响锁的丢失.也就是说我进入方法查询用户加了排他锁,在这个方法结束之前该数据就是安全的.\n\n好了理论说完了,看程序了:\n这是我的service方法\n\n```\n@Transactional(readOnly=false)\n    public int transfer(String userId, String money, String remarks,\n            String otherId) {\n        HcUser me = this.userDao.getUserForUpdate(userId);//获取用户信息\n        HcUser other = this.userDao.getUserForUpdate(otherId);//获取用户信息\n      //这里写转账的一些操作(修改/插入等)\n        return 0;\n    }\n```\n\n这是mybatis的sql:\n\n```\n<select id=\"getUserForUpdate\" parameterType=\"java.lang.String\" resultType=\"HcUser\">\n    select * \n    from hc_user \n    where id=#{id}\n    for update <!-- 这里加锁-->\n</select>\n```\n\n\n写的是web项目,需要在浏览器敲地址测试,但是无法实现多线程,于是可以这样:\n用java写访问url的程序(网上找的拉):\n\n```\npackage examples;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport org.apache.commons.lang3.RandomUtils;\n\npublic class TEST {\n\n    public static void main(String args[]) {\n        for(int i = 0;i <400; i++) {//设置400个线程\n            String money =RandomUtils.nextInt(1, 5)+\"\";\n            System.out.println(money);\n            //模拟几个用户\n            String userId = \"2aefe0c4c88f4ea1b39a68b6e33208d8\";\n            String otherId=\"1bb4fc7d35c342a3a19bc23171aa3d22\";\n            String userId1=\"1b638bd7dbb445a3bfe1efbec1a61e4e\";\n            String userId2=\"551926783cb64524b3127ec02529d371\";\n            Account a = null;\n        //设置不同的转账\n            if(\"1\".equals(money)) {\n                 a = new Account(money,userId,otherId);\n            }\n            else if(\"2\".equals(money)) {\n                 a = new Account(money,userId1,userId);\n            }else if(\"3\".equals(money)) {\n                 a = new Account(money,userId2,userId);\n            }\n            else {\n                 a = new Account(money,userId1,otherId);\n            }\n            Thread t = new Thread(a);\n            t.start();\n        }\n    }\n    static class Account implements Runnable {\n        String money = \"0\";\n        String userId = \"\";\n        String otherId=\"\";\n        public Account(String money,String userId,String otherId) {\n            this.money = money;\n            this.otherId = otherId;\n            this.userId = userId;\n        }\n\n        @Override\n        public void run() {\n            long begintime = System.currentTimeMillis();\n              try {\n               URL url = new URL(\"http:xxx?userId=\"\n                       +userId+\"&otherId=\"+otherId+\"&remarks=xxx\"\n                       +\"&money=\"+money);\n               HttpURLConnection urlcon = (HttpURLConnection)url.openConnection();\n               urlcon.connect();         //获取连接\n               InputStream is = urlcon.getInputStream();\n               BufferedReader buffer = new BufferedReader(new InputStreamReader(is));\n               StringBuffer bs = new StringBuffer();\n               String l = null;\n               while((l=buffer.readLine())!=null){\n                   bs.append(l).append(\"/n\");\n               }\n               System.out.println(bs.toString());//打印出信息\n\n               System.out.println(\"总共执行时间为：\"+(System.currentTimeMillis()-begintime)+\"毫秒\");\n            }catch(IOException e){\n               System.out.println(e);\n           }\n        }\n}\n}\n```\n\n这样写的程序可能出现有两个线程同时进行A给B转账,请先不要在意这种情况.\n这是我数据库账户初始值,每人设置100:\n\n1,在不加锁的情况下,跑完后:\n\n总额变小了扇\n2,加了共享锁,跑完后:\n\n总额是对的,但是报错了:\nDeadlock found when trying to get lock; try restarting transaction;\n产生死锁了,但是mysql会自己强制性重启事务,所以不会一直死锁下去,程序之后还会运行.\n3加了排他锁后:\n\n没有错误,正确运行\n\n这样就可以保证转账正确运行了,","slug":"mysql-transfer","published":1,"updated":"2017-04-18T08:01:22.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxdu20002tojtsxkpjgh9","content":"<p>做个平台间余额的互相转账,重点在于如何解决并发访问数据错乱的问题.比如俩个人之间同时都在给对方转账.以及很多人同时给一个人转账.  </p>\n<p>必须保证数据库里面的数据是随时正确的.<br>我本没有想到过这一层面,被提醒的.<br>比如有个转账的方法transfer(业务逻辑主要写在这里)<br><a id=\"more\"></a><br>1.首先想到的用多线程加锁,看了资料.是可以实现,但是问题是对方法加锁或者代码块加锁,那么每次只能执行一个线程,a转给b执行了,可c却不能同时转给d,二者根本不会影响啊.所以多线程白看了. </p>\n<p>2.然后就取决在数据库上面了.用的是mysql innodb,所以找了这方面锁的知识.<br>这篇博客写的不错,感谢:<a href=\"http://www.cnblogs.com/Arlen/articles/1756616.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/Arlen/articles/1756616.html</a> </p>\n<p>结合其他的参考学习,我总结了一下: </p>\n<p>mysql innodb主要有表级锁和行级锁,转账之间不能互相影响,所以选择行级锁. </p>\n<p>行级锁有两种:共享锁和排他锁 </p>\n<p>如何加锁:</p>\n<ul>\n<li>共享锁:select xxxx lock in share mode </li>\n<li>排他锁:select xxx for update </li>\n</ul>\n<p>顾名思义共享锁的重点在于多个事务可以同时共享同一资源上的共享锁,如果一个事务获取了一个数据的共享锁,那么别的事务也可以再获取这个锁.获取共享锁的事务可以对数据进行读操作.,读完了就释放. </p>\n<p>排他锁就是一旦事务获取了这个锁,他就必须持有这个锁到结束,并不准其他事务获取这个锁.持有排他锁的事务可以对数据进行写操作.</p>\n<p>然后明确一点一个事务在一个时刻里只能拥有一把锁</p>\n<p>在转账时如果我先查找用户的账户信息,如果我用共享锁的话,别的事务也可以共享这个锁,这时候就会产生死锁. </p>\n<p>这里的死锁产生的原因在于: </p>\n<p>当A向B转账的时候,B也在向C转账,A开始转账的时候获取A,B账户信息,A开始转账的时候获取C,B账户信息,这里是共享锁,然后我需要对账户进行更新,这时候问题就出现了; </p>\n<p>假如A转账在准备更新B的信息时,发现B转账也准备更新B,A就等B释放共享锁,B也等A在释放共享锁,也就产生死锁了. </p>\n<p>如果没有,那么在查询完后,A事务就释放了共享锁,然后这时候别的B事务就可以获取这个用户账户信息的共享锁, </p>\n<p>假如B获取了.那A了刚刚查出来了用户信息,想改的时候(mysql修改默认加上排他锁)发现资源又被锁了.给别人挪用了.别人对他干了啥我哪知道,以后数据就肯能和我刚读出来的不一样了. </p>\n<p>排它锁事务一旦获取了就一直到事务结束都会拥有这把锁,这样就很好的杜绝了数据被修改的可能性.那么这时候重点就在于这里的事务怎么开始和啥时候结束了.我的项目用的是springMVC,就是spring的事务是怎么确定的. </p>\n<p>这篇博客写的不错,感谢:   <a href=\"http://www.cnblogs.com/davidwang456/p/3832949.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/davidwang456/p/3832949.html</a> </p>\n<p>这里不需要知道spring事务的深层原理,只需知道spring事务是在进入sercice层执行方法的时候开始定义一个事务,然后在这个方法结束后事务才结束(事务提交).就是说在这个方法里面不管调用了多少个dao方法,都不会影响锁的丢失.也就是说我进入方法查询用户加了排他锁,在这个方法结束之前该数据就是安全的.</p>\n<p>好了理论说完了,看程序了:<br>这是我的service方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Transactional(readOnly=false)</div><div class=\"line\">    public int transfer(String userId, String money, String remarks,</div><div class=\"line\">            String otherId) &#123;</div><div class=\"line\">        HcUser me = this.userDao.getUserForUpdate(userId);//获取用户信息</div><div class=\"line\">        HcUser other = this.userDao.getUserForUpdate(otherId);//获取用户信息</div><div class=\"line\">      //这里写转账的一些操作(修改/插入等)</div><div class=\"line\">        return 0;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这是mybatis的sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=&quot;getUserForUpdate&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;HcUser&quot;&gt;</div><div class=\"line\">    select * </div><div class=\"line\">    from hc_user </div><div class=\"line\">    where id=#&#123;id&#125;</div><div class=\"line\">    for update &lt;!-- 这里加锁--&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>写的是web项目,需要在浏览器敲地址测试,但是无法实现多线程,于是可以这样:<br>用java写访问url的程序(网上找的拉):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">package examples;</div><div class=\"line\"></div><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStream;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.net.HttpURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\"></div><div class=\"line\">import org.apache.commons.lang3.RandomUtils;</div><div class=\"line\"></div><div class=\"line\">public class TEST &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\">        for(int i = 0;i &lt;400; i++) &#123;//设置400个线程</div><div class=\"line\">            String money =RandomUtils.nextInt(1, 5)+&quot;&quot;;</div><div class=\"line\">            System.out.println(money);</div><div class=\"line\">            //模拟几个用户</div><div class=\"line\">            String userId = &quot;2aefe0c4c88f4ea1b39a68b6e33208d8&quot;;</div><div class=\"line\">            String otherId=&quot;1bb4fc7d35c342a3a19bc23171aa3d22&quot;;</div><div class=\"line\">            String userId1=&quot;1b638bd7dbb445a3bfe1efbec1a61e4e&quot;;</div><div class=\"line\">            String userId2=&quot;551926783cb64524b3127ec02529d371&quot;;</div><div class=\"line\">            Account a = null;</div><div class=\"line\">        //设置不同的转账</div><div class=\"line\">            if(&quot;1&quot;.equals(money)) &#123;</div><div class=\"line\">                 a = new Account(money,userId,otherId);</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if(&quot;2&quot;.equals(money)) &#123;</div><div class=\"line\">                 a = new Account(money,userId1,userId);</div><div class=\"line\">            &#125;else if(&quot;3&quot;.equals(money)) &#123;</div><div class=\"line\">                 a = new Account(money,userId2,userId);</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                 a = new Account(money,userId1,otherId);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Thread t = new Thread(a);</div><div class=\"line\">            t.start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    static class Account implements Runnable &#123;</div><div class=\"line\">        String money = &quot;0&quot;;</div><div class=\"line\">        String userId = &quot;&quot;;</div><div class=\"line\">        String otherId=&quot;&quot;;</div><div class=\"line\">        public Account(String money,String userId,String otherId) &#123;</div><div class=\"line\">            this.money = money;</div><div class=\"line\">            this.otherId = otherId;</div><div class=\"line\">            this.userId = userId;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void run() &#123;</div><div class=\"line\">            long begintime = System.currentTimeMillis();</div><div class=\"line\">              try &#123;</div><div class=\"line\">               URL url = new URL(&quot;http:xxx?userId=&quot;</div><div class=\"line\">                       +userId+&quot;&amp;otherId=&quot;+otherId+&quot;&amp;remarks=xxx&quot;</div><div class=\"line\">                       +&quot;&amp;money=&quot;+money);</div><div class=\"line\">               HttpURLConnection urlcon = (HttpURLConnection)url.openConnection();</div><div class=\"line\">               urlcon.connect();         //获取连接</div><div class=\"line\">               InputStream is = urlcon.getInputStream();</div><div class=\"line\">               BufferedReader buffer = new BufferedReader(new InputStreamReader(is));</div><div class=\"line\">               StringBuffer bs = new StringBuffer();</div><div class=\"line\">               String l = null;</div><div class=\"line\">               while((l=buffer.readLine())!=null)&#123;</div><div class=\"line\">                   bs.append(l).append(&quot;/n&quot;);</div><div class=\"line\">               &#125;</div><div class=\"line\">               System.out.println(bs.toString());//打印出信息</div><div class=\"line\"></div><div class=\"line\">               System.out.println(&quot;总共执行时间为：&quot;+(System.currentTimeMillis()-begintime)+&quot;毫秒&quot;);</div><div class=\"line\">            &#125;catch(IOException e)&#123;</div><div class=\"line\">               System.out.println(e);</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样写的程序可能出现有两个线程同时进行A给B转账,请先不要在意这种情况.<br>这是我数据库账户初始值,每人设置100:</p>\n<p>1,在不加锁的情况下,跑完后:</p>\n<p>总额变小了扇<br>2,加了共享锁,跑完后:</p>\n<p>总额是对的,但是报错了:<br>Deadlock found when trying to get lock; try restarting transaction;<br>产生死锁了,但是mysql会自己强制性重启事务,所以不会一直死锁下去,程序之后还会运行.<br>3加了排他锁后:</p>\n<p>没有错误,正确运行</p>\n<p>这样就可以保证转账正确运行了,</p>\n","excerpt":"<p>做个平台间余额的互相转账,重点在于如何解决并发访问数据错乱的问题.比如俩个人之间同时都在给对方转账.以及很多人同时给一个人转账.  </p>\n<p>必须保证数据库里面的数据是随时正确的.<br>我本没有想到过这一层面,被提醒的.<br>比如有个转账的方法transfer(业务逻辑主要写在这里)<br>","more":"<br>1.首先想到的用多线程加锁,看了资料.是可以实现,但是问题是对方法加锁或者代码块加锁,那么每次只能执行一个线程,a转给b执行了,可c却不能同时转给d,二者根本不会影响啊.所以多线程白看了. </p>\n<p>2.然后就取决在数据库上面了.用的是mysql innodb,所以找了这方面锁的知识.<br>这篇博客写的不错,感谢:<a href=\"http://www.cnblogs.com/Arlen/articles/1756616.html\">http://www.cnblogs.com/Arlen/articles/1756616.html</a> </p>\n<p>结合其他的参考学习,我总结了一下: </p>\n<p>mysql innodb主要有表级锁和行级锁,转账之间不能互相影响,所以选择行级锁. </p>\n<p>行级锁有两种:共享锁和排他锁 </p>\n<p>如何加锁:</p>\n<ul>\n<li>共享锁:select xxxx lock in share mode </li>\n<li>排他锁:select xxx for update </li>\n</ul>\n<p>顾名思义共享锁的重点在于多个事务可以同时共享同一资源上的共享锁,如果一个事务获取了一个数据的共享锁,那么别的事务也可以再获取这个锁.获取共享锁的事务可以对数据进行读操作.,读完了就释放. </p>\n<p>排他锁就是一旦事务获取了这个锁,他就必须持有这个锁到结束,并不准其他事务获取这个锁.持有排他锁的事务可以对数据进行写操作.</p>\n<p>然后明确一点一个事务在一个时刻里只能拥有一把锁</p>\n<p>在转账时如果我先查找用户的账户信息,如果我用共享锁的话,别的事务也可以共享这个锁,这时候就会产生死锁. </p>\n<p>这里的死锁产生的原因在于: </p>\n<p>当A向B转账的时候,B也在向C转账,A开始转账的时候获取A,B账户信息,A开始转账的时候获取C,B账户信息,这里是共享锁,然后我需要对账户进行更新,这时候问题就出现了; </p>\n<p>假如A转账在准备更新B的信息时,发现B转账也准备更新B,A就等B释放共享锁,B也等A在释放共享锁,也就产生死锁了. </p>\n<p>如果没有,那么在查询完后,A事务就释放了共享锁,然后这时候别的B事务就可以获取这个用户账户信息的共享锁, </p>\n<p>假如B获取了.那A了刚刚查出来了用户信息,想改的时候(mysql修改默认加上排他锁)发现资源又被锁了.给别人挪用了.别人对他干了啥我哪知道,以后数据就肯能和我刚读出来的不一样了. </p>\n<p>排它锁事务一旦获取了就一直到事务结束都会拥有这把锁,这样就很好的杜绝了数据被修改的可能性.那么这时候重点就在于这里的事务怎么开始和啥时候结束了.我的项目用的是springMVC,就是spring的事务是怎么确定的. </p>\n<p>这篇博客写的不错,感谢:   <a href=\"http://www.cnblogs.com/davidwang456/p/3832949.html\">http://www.cnblogs.com/davidwang456/p/3832949.html</a> </p>\n<p>这里不需要知道spring事务的深层原理,只需知道spring事务是在进入sercice层执行方法的时候开始定义一个事务,然后在这个方法结束后事务才结束(事务提交).就是说在这个方法里面不管调用了多少个dao方法,都不会影响锁的丢失.也就是说我进入方法查询用户加了排他锁,在这个方法结束之前该数据就是安全的.</p>\n<p>好了理论说完了,看程序了:<br>这是我的service方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Transactional(readOnly=false)</div><div class=\"line\">    public int transfer(String userId, String money, String remarks,</div><div class=\"line\">            String otherId) &#123;</div><div class=\"line\">        HcUser me = this.userDao.getUserForUpdate(userId);//获取用户信息</div><div class=\"line\">        HcUser other = this.userDao.getUserForUpdate(otherId);//获取用户信息</div><div class=\"line\">      //这里写转账的一些操作(修改/插入等)</div><div class=\"line\">        return 0;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这是mybatis的sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select id=&quot;getUserForUpdate&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;HcUser&quot;&gt;</div><div class=\"line\">    select * </div><div class=\"line\">    from hc_user </div><div class=\"line\">    where id=#&#123;id&#125;</div><div class=\"line\">    for update &lt;!-- 这里加锁--&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure>\n<p>写的是web项目,需要在浏览器敲地址测试,但是无法实现多线程,于是可以这样:<br>用java写访问url的程序(网上找的拉):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">package examples;</div><div class=\"line\"></div><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStream;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.net.HttpURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\"></div><div class=\"line\">import org.apache.commons.lang3.RandomUtils;</div><div class=\"line\"></div><div class=\"line\">public class TEST &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String args[]) &#123;</div><div class=\"line\">        for(int i = 0;i &lt;400; i++) &#123;//设置400个线程</div><div class=\"line\">            String money =RandomUtils.nextInt(1, 5)+&quot;&quot;;</div><div class=\"line\">            System.out.println(money);</div><div class=\"line\">            //模拟几个用户</div><div class=\"line\">            String userId = &quot;2aefe0c4c88f4ea1b39a68b6e33208d8&quot;;</div><div class=\"line\">            String otherId=&quot;1bb4fc7d35c342a3a19bc23171aa3d22&quot;;</div><div class=\"line\">            String userId1=&quot;1b638bd7dbb445a3bfe1efbec1a61e4e&quot;;</div><div class=\"line\">            String userId2=&quot;551926783cb64524b3127ec02529d371&quot;;</div><div class=\"line\">            Account a = null;</div><div class=\"line\">        //设置不同的转账</div><div class=\"line\">            if(&quot;1&quot;.equals(money)) &#123;</div><div class=\"line\">                 a = new Account(money,userId,otherId);</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if(&quot;2&quot;.equals(money)) &#123;</div><div class=\"line\">                 a = new Account(money,userId1,userId);</div><div class=\"line\">            &#125;else if(&quot;3&quot;.equals(money)) &#123;</div><div class=\"line\">                 a = new Account(money,userId2,userId);</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                 a = new Account(money,userId1,otherId);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Thread t = new Thread(a);</div><div class=\"line\">            t.start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    static class Account implements Runnable &#123;</div><div class=\"line\">        String money = &quot;0&quot;;</div><div class=\"line\">        String userId = &quot;&quot;;</div><div class=\"line\">        String otherId=&quot;&quot;;</div><div class=\"line\">        public Account(String money,String userId,String otherId) &#123;</div><div class=\"line\">            this.money = money;</div><div class=\"line\">            this.otherId = otherId;</div><div class=\"line\">            this.userId = userId;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public void run() &#123;</div><div class=\"line\">            long begintime = System.currentTimeMillis();</div><div class=\"line\">              try &#123;</div><div class=\"line\">               URL url = new URL(&quot;http:xxx?userId=&quot;</div><div class=\"line\">                       +userId+&quot;&amp;otherId=&quot;+otherId+&quot;&amp;remarks=xxx&quot;</div><div class=\"line\">                       +&quot;&amp;money=&quot;+money);</div><div class=\"line\">               HttpURLConnection urlcon = (HttpURLConnection)url.openConnection();</div><div class=\"line\">               urlcon.connect();         //获取连接</div><div class=\"line\">               InputStream is = urlcon.getInputStream();</div><div class=\"line\">               BufferedReader buffer = new BufferedReader(new InputStreamReader(is));</div><div class=\"line\">               StringBuffer bs = new StringBuffer();</div><div class=\"line\">               String l = null;</div><div class=\"line\">               while((l=buffer.readLine())!=null)&#123;</div><div class=\"line\">                   bs.append(l).append(&quot;/n&quot;);</div><div class=\"line\">               &#125;</div><div class=\"line\">               System.out.println(bs.toString());//打印出信息</div><div class=\"line\"></div><div class=\"line\">               System.out.println(&quot;总共执行时间为：&quot;+(System.currentTimeMillis()-begintime)+&quot;毫秒&quot;);</div><div class=\"line\">            &#125;catch(IOException e)&#123;</div><div class=\"line\">               System.out.println(e);</div><div class=\"line\">           &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样写的程序可能出现有两个线程同时进行A给B转账,请先不要在意这种情况.<br>这是我数据库账户初始值,每人设置100:</p>\n<p>1,在不加锁的情况下,跑完后:</p>\n<p>总额变小了扇<br>2,加了共享锁,跑完后:</p>\n<p>总额是对的,但是报错了:<br>Deadlock found when trying to get lock; try restarting transaction;<br>产生死锁了,但是mysql会自己强制性重启事务,所以不会一直死锁下去,程序之后还会运行.<br>3加了排他锁后:</p>\n<p>没有错误,正确运行</p>\n<p>这样就可以保证转账正确运行了,</p>"},{"title":"finally小结","date":"2017-03-19T08:00:38.000Z","_content":"\n\n## 记录一下finally的一些简单知识点.\n\n---\n1.  正常情况下finally都会执行,且我们最好不要在finally里面执行业务逻辑,一般用来对资源的释放\n2. finally虽说是肯定会执行的,但是有些情况下就不会执行\n<!--more-->\n```\nThread t = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(\"abc\");\n\t\t\t\t\tSystem.exit(0);//直接结束程序 类似于关闭电源\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(\"finally\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt.start();\n```\n从学习中我们知道,如果没有一个用户线程(即非守护线程)在运行,jvm就会自动退出, 当t线程start()后,进入main线程(非daemon线程),main线程运行完毕后就没有用户线程了,所有jvm退出,导致finally不能运行\n\n```\npublic static void main(String args[]) throws Exception {\n\t\tThread t = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(\"abc\");\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(\"finally\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt.setDaemon(true);//设置为守护线程\n\t\tt.start();\n\t\tSystem.out.println(\"aaa\");\n\t}\n```\n\n\n\n3.eclipse用debug模式断点到try的里面,然后鼠标点强制关闭线程 ,finally也不会运行(相当于断电),呵呵\n\n所以,finally理论上是总会运行,但是再怎么理论也需要时间和机会让他运行,就如病毒再强,我把电源拔了,你还有啥用.","source":"_posts/something-about-finally.md","raw":"---\ntitle: finally小结\ndate: 2017-03-19 16:00:38\ncategories: \"java\"\ntags: \n\t- finally\n---\n\n\n## 记录一下finally的一些简单知识点.\n\n---\n1.  正常情况下finally都会执行,且我们最好不要在finally里面执行业务逻辑,一般用来对资源的释放\n2. finally虽说是肯定会执行的,但是有些情况下就不会执行\n<!--more-->\n```\nThread t = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(\"abc\");\n\t\t\t\t\tSystem.exit(0);//直接结束程序 类似于关闭电源\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(\"finally\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt.start();\n```\n从学习中我们知道,如果没有一个用户线程(即非守护线程)在运行,jvm就会自动退出, 当t线程start()后,进入main线程(非daemon线程),main线程运行完毕后就没有用户线程了,所有jvm退出,导致finally不能运行\n\n```\npublic static void main(String args[]) throws Exception {\n\t\tThread t = new Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.out.println(\"abc\");\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t} finally {\n\t\t\t\t\tSystem.out.println(\"finally\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt.setDaemon(true);//设置为守护线程\n\t\tt.start();\n\t\tSystem.out.println(\"aaa\");\n\t}\n```\n\n\n\n3.eclipse用debug模式断点到try的里面,然后鼠标点强制关闭线程 ,finally也不会运行(相当于断电),呵呵\n\n所以,finally理论上是总会运行,但是再怎么理论也需要时间和机会让他运行,就如病毒再强,我把电源拔了,你还有啥用.","slug":"something-about-finally","published":1,"updated":"2017-04-18T07:34:07.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxduh0006tojt10cku105","content":"<h2 id=\"记录一下finally的一些简单知识点\"><a href=\"#记录一下finally的一些简单知识点\" class=\"headerlink\" title=\"记录一下finally的一些简单知识点.\"></a>记录一下finally的一些简单知识点.</h2><hr>\n<ol>\n<li>正常情况下finally都会执行,且我们最好不要在finally里面执行业务逻辑,一般用来对资源的释放</li>\n<li>finally虽说是肯定会执行的,但是有些情况下就不会执行<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread t = new Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;abc&quot;);</div><div class=\"line\">\t\t\t\t\tSystem.exit(0);//直接结束程序 类似于关闭电源</div><div class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125; finally &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;finally&quot;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\tt.start();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>从学习中我们知道,如果没有一个用户线程(即非守护线程)在运行,jvm就会自动退出, 当t线程start()后,进入main线程(非daemon线程),main线程运行完毕后就没有用户线程了,所有jvm退出,导致finally不能运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String args[]) throws Exception &#123;</div><div class=\"line\">\t\tThread t = new Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;abc&quot;);</div><div class=\"line\">\t\t\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125; finally &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;finally&quot;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\tt.setDaemon(true);//设置为守护线程</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tSystem.out.println(&quot;aaa&quot;);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>3.eclipse用debug模式断点到try的里面,然后鼠标点强制关闭线程 ,finally也不会运行(相当于断电),呵呵</p>\n<p>所以,finally理论上是总会运行,但是再怎么理论也需要时间和机会让他运行,就如病毒再强,我把电源拔了,你还有啥用.</p>\n","excerpt":"<h2 id=\"记录一下finally的一些简单知识点\"><a href=\"#记录一下finally的一些简单知识点\" class=\"headerlink\" title=\"记录一下finally的一些简单知识点.\"></a>记录一下finally的一些简单知识点.</h2><hr>\n<ol>\n<li>正常情况下finally都会执行,且我们最好不要在finally里面执行业务逻辑,一般用来对资源的释放</li>\n<li>finally虽说是肯定会执行的,但是有些情况下就不会执行","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thread t = new Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;abc&quot;);</div><div class=\"line\">\t\t\t\t\tSystem.exit(0);//直接结束程序 类似于关闭电源</div><div class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125; finally &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;finally&quot;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\tt.start();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>从学习中我们知道,如果没有一个用户线程(即非守护线程)在运行,jvm就会自动退出, 当t线程start()后,进入main线程(非daemon线程),main线程运行完毕后就没有用户线程了,所有jvm退出,导致finally不能运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String args[]) throws Exception &#123;</div><div class=\"line\">\t\tThread t = new Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;abc&quot;);</div><div class=\"line\">\t\t\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t&#125; finally &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(&quot;finally&quot;);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\tt.setDaemon(true);//设置为守护线程</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t\tSystem.out.println(&quot;aaa&quot;);</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>3.eclipse用debug模式断点到try的里面,然后鼠标点强制关闭线程 ,finally也不会运行(相当于断电),呵呵</p>\n<p>所以,finally理论上是总会运行,但是再怎么理论也需要时间和机会让他运行,就如病毒再强,我把电源拔了,你还有啥用.</p>"},{"title":"怎么将emoji表情存入mysql","date":"2017-04-18T07:52:47.000Z","_content":" \n1. mysql的数据库, 表 ,字段的字符集必须是utf8mb4,怎么设置自酌,\n但可以看看自己数据库的字符集 show variables like '%set%\n保证 Character set是utf8mb4 -- UTF-8 Unicode \ncollation是utf8mb4_unicode_ci就可以了,\nutf8和utf8mb4不冲突的,所以不用考虑改变后对其他地方有影响\n<!--more-->\n2.utf8mb4必须是新版的mysql才支持,网上虽说5.5+就可以了,但是没有具体到几点几,最好还是mysql官网下载最新的版本,\n具体的安装卸载过程自酌\n\n3.emoji表情不是图片,而是一种4字节的字符,属于unicode,以前的mysql utf8只能解析到3字节,不要想着怎么做图片替换的问题.\n\n4.确定所有的字符都修改完毕后,在存入数据库之前代码做一下调整就行:我用的springMVC+mybatis ,\n所以再需要输入表情的mybatis xml 里面加一个\n\n\n```\n<update id=\"predo\">\nset names utfmb4\n</update>\n```\n\n然后再调用你需要插入表情的语句,\n我在service这样调用: \n\n\n```\nthis.dao.predo(); \nthis.dao.insert(feedBack);\n```\n\n\n这样就会插入表情到数据库,但是数据库显示的问号,不过没关系,app里面显示出来的的确是表情.\n其实就是每次调用之前先执行一下set names utfmb4\n\n我是在之前的数据库改到utfmb4的也许从一开始就设置好也许就不用这样处理了.\n\n5.也许你没成功,也许别的方法或者设置也是可以的,请选择你认为简单的.但是原因都是因为mysql无法存入的问题,从这方面解决就行了","source":"_posts/save-emoji-in-mysql.md","raw":"---\ntitle: 怎么将emoji表情存入mysql\ndate: 2017-04-18 15:52:47\ncategories: mysql\ntags: \n\t- mysql\n---\n \n1. mysql的数据库, 表 ,字段的字符集必须是utf8mb4,怎么设置自酌,\n但可以看看自己数据库的字符集 show variables like '%set%\n保证 Character set是utf8mb4 -- UTF-8 Unicode \ncollation是utf8mb4_unicode_ci就可以了,\nutf8和utf8mb4不冲突的,所以不用考虑改变后对其他地方有影响\n<!--more-->\n2.utf8mb4必须是新版的mysql才支持,网上虽说5.5+就可以了,但是没有具体到几点几,最好还是mysql官网下载最新的版本,\n具体的安装卸载过程自酌\n\n3.emoji表情不是图片,而是一种4字节的字符,属于unicode,以前的mysql utf8只能解析到3字节,不要想着怎么做图片替换的问题.\n\n4.确定所有的字符都修改完毕后,在存入数据库之前代码做一下调整就行:我用的springMVC+mybatis ,\n所以再需要输入表情的mybatis xml 里面加一个\n\n\n```\n<update id=\"predo\">\nset names utfmb4\n</update>\n```\n\n然后再调用你需要插入表情的语句,\n我在service这样调用: \n\n\n```\nthis.dao.predo(); \nthis.dao.insert(feedBack);\n```\n\n\n这样就会插入表情到数据库,但是数据库显示的问号,不过没关系,app里面显示出来的的确是表情.\n其实就是每次调用之前先执行一下set names utfmb4\n\n我是在之前的数据库改到utfmb4的也许从一开始就设置好也许就不用这样处理了.\n\n5.也许你没成功,也许别的方法或者设置也是可以的,请选择你认为简单的.但是原因都是因为mysql无法存入的问题,从这方面解决就行了","slug":"save-emoji-in-mysql","published":1,"updated":"2017-04-18T07:54:05.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxduh0008tojtwhksnsl1","content":"<ol>\n<li>mysql的数据库, 表 ,字段的字符集必须是utf8mb4,怎么设置自酌,<br>但可以看看自己数据库的字符集 show variables like ‘%set%<br>保证 Character set是utf8mb4 – UTF-8 Unicode<br>collation是utf8mb4_unicode_ci就可以了,<br>utf8和utf8mb4不冲突的,所以不用考虑改变后对其他地方有影响<a id=\"more\"></a>\n2.utf8mb4必须是新版的mysql才支持,网上虽说5.5+就可以了,但是没有具体到几点几,最好还是mysql官网下载最新的版本,<br>具体的安装卸载过程自酌</li>\n</ol>\n<p>3.emoji表情不是图片,而是一种4字节的字符,属于unicode,以前的mysql utf8只能解析到3字节,不要想着怎么做图片替换的问题.</p>\n<p>4.确定所有的字符都修改完毕后,在存入数据库之前代码做一下调整就行:我用的springMVC+mybatis ,<br>所以再需要输入表情的mybatis xml 里面加一个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;update id=&quot;predo&quot;&gt;</div><div class=\"line\">set names utfmb4</div><div class=\"line\">&lt;/update&gt;</div></pre></td></tr></table></figure>\n<p>然后再调用你需要插入表情的语句,<br>我在service这样调用: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.dao.predo(); </div><div class=\"line\">this.dao.insert(feedBack);</div></pre></td></tr></table></figure>\n<p>这样就会插入表情到数据库,但是数据库显示的问号,不过没关系,app里面显示出来的的确是表情.<br>其实就是每次调用之前先执行一下set names utfmb4</p>\n<p>我是在之前的数据库改到utfmb4的也许从一开始就设置好也许就不用这样处理了.</p>\n<p>5.也许你没成功,也许别的方法或者设置也是可以的,请选择你认为简单的.但是原因都是因为mysql无法存入的问题,从这方面解决就行了</p>\n","excerpt":"<ol>\n<li>mysql的数据库, 表 ,字段的字符集必须是utf8mb4,怎么设置自酌,<br>但可以看看自己数据库的字符集 show variables like ‘%set%<br>保证 Character set是utf8mb4 – UTF-8 Unicode<br>collation是utf8mb4_unicode_ci就可以了,<br>utf8和utf8mb4不冲突的,所以不用考虑改变后对其他地方有影响","more":"2.utf8mb4必须是新版的mysql才支持,网上虽说5.5+就可以了,但是没有具体到几点几,最好还是mysql官网下载最新的版本,<br>具体的安装卸载过程自酌</li>\n</ol>\n<p>3.emoji表情不是图片,而是一种4字节的字符,属于unicode,以前的mysql utf8只能解析到3字节,不要想着怎么做图片替换的问题.</p>\n<p>4.确定所有的字符都修改完毕后,在存入数据库之前代码做一下调整就行:我用的springMVC+mybatis ,<br>所以再需要输入表情的mybatis xml 里面加一个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;update id=&quot;predo&quot;&gt;</div><div class=\"line\">set names utfmb4</div><div class=\"line\">&lt;/update&gt;</div></pre></td></tr></table></figure>\n<p>然后再调用你需要插入表情的语句,<br>我在service这样调用: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.dao.predo(); </div><div class=\"line\">this.dao.insert(feedBack);</div></pre></td></tr></table></figure>\n<p>这样就会插入表情到数据库,但是数据库显示的问号,不过没关系,app里面显示出来的的确是表情.<br>其实就是每次调用之前先执行一下set names utfmb4</p>\n<p>我是在之前的数据库改到utfmb4的也许从一开始就设置好也许就不用这样处理了.</p>\n<p>5.也许你没成功,也许别的方法或者设置也是可以的,请选择你认为简单的.但是原因都是因为mysql无法存入的问题,从这方面解决就行了</p>"},{"title":"interrupt简单认识","date":"2017-03-19T16:06:43.000Z","_content":"interrupt意思为中断,为线程运行时提供一个中断机制.\n但是中断和阻塞是不一样的,线程的中断并没有结束或暂停线程,而是对线程设置了一个中断的信号,通过此信号来进行具体的其他操作.\n\n<!--more-->\n\n在Thread里面提供了三个方法:\n1. interrupt() 对一个线程进行中断操作,就需要调用此方法,设置中断信号\n2. interrupted() 判断线程是否设置过中断信号,返回true/false,同时清除1中方法设置的信号,所以连续俩次调用此方法后,第二次会返回false\n3. isInterrupted() 判断线程是否设置过中断信号,但并没有清除信号.\n\n\n所以当一个线程调用interrupt()的时候,其实就是设置了一个中断信号,然后来让线程知道有中断发生,好让其决定怎么去回应这个信号.\n\n1.所以interrupt适合用在join sleep wait这些阻塞型的方法,从而达到提前结束阻塞的目的.原因是 这种阻塞类的操作,在阻塞时调用interrupt()设置中断信号,会导致这些操作抛出interruptException,这样就能提前结束阻塞.\n\n2.在不是这些阻塞情况时,我们可以设置一个votatile变量,来表示结束状态,\n然后我们调用interrupt()来发出信号,告诉程序后续处理.\n\n```\nclass B extends Thread {\n\tprivate volatile boolean stop = false;\n\n\t@Override\n\tpublic void run() {\n\t\tint i = 0;\n\t\twhile (!stop) {\n\t\t\tfor (int a = 0; a < 10000000; a++)\n\t\t\t\tfor (int b = 0; b < 5000000; b++) {\n\n\t\t\t\t}\n\t\t\tSystem.out.println(\"吃饭中..\" + i++);\n\t\t}\n\n\t}\n\n\tpublic void stoped() {\n\t\tstop = true;\n\t\tthis.interrupt();//设置中断信号\n\t}\n}\n```\n\n\n我们在线程运行后可以这样:\n\n```\nt2.start();\nThread.sleep(1000);\nt.stoped();\nif (t.isInterrupted()) {\n\tthrow new InterruptedException();\n}\n```\n\n通过判断线程是否中断过,主动抛出中断异常,来让更上层的程序进行后续处理.\n\n---\n\n[练习的代码参见github](https://github.com/dressrosa/dailydemo)","source":"_posts/something-about-interrupt.md","raw":"---\ntitle: interrupt简单认识\ndate: 2017-03-20 00:06:43\ncategories: \"java\"\ntags: \n\t- interrupt\n---\ninterrupt意思为中断,为线程运行时提供一个中断机制.\n但是中断和阻塞是不一样的,线程的中断并没有结束或暂停线程,而是对线程设置了一个中断的信号,通过此信号来进行具体的其他操作.\n\n<!--more-->\n\n在Thread里面提供了三个方法:\n1. interrupt() 对一个线程进行中断操作,就需要调用此方法,设置中断信号\n2. interrupted() 判断线程是否设置过中断信号,返回true/false,同时清除1中方法设置的信号,所以连续俩次调用此方法后,第二次会返回false\n3. isInterrupted() 判断线程是否设置过中断信号,但并没有清除信号.\n\n\n所以当一个线程调用interrupt()的时候,其实就是设置了一个中断信号,然后来让线程知道有中断发生,好让其决定怎么去回应这个信号.\n\n1.所以interrupt适合用在join sleep wait这些阻塞型的方法,从而达到提前结束阻塞的目的.原因是 这种阻塞类的操作,在阻塞时调用interrupt()设置中断信号,会导致这些操作抛出interruptException,这样就能提前结束阻塞.\n\n2.在不是这些阻塞情况时,我们可以设置一个votatile变量,来表示结束状态,\n然后我们调用interrupt()来发出信号,告诉程序后续处理.\n\n```\nclass B extends Thread {\n\tprivate volatile boolean stop = false;\n\n\t@Override\n\tpublic void run() {\n\t\tint i = 0;\n\t\twhile (!stop) {\n\t\t\tfor (int a = 0; a < 10000000; a++)\n\t\t\t\tfor (int b = 0; b < 5000000; b++) {\n\n\t\t\t\t}\n\t\t\tSystem.out.println(\"吃饭中..\" + i++);\n\t\t}\n\n\t}\n\n\tpublic void stoped() {\n\t\tstop = true;\n\t\tthis.interrupt();//设置中断信号\n\t}\n}\n```\n\n\n我们在线程运行后可以这样:\n\n```\nt2.start();\nThread.sleep(1000);\nt.stoped();\nif (t.isInterrupted()) {\n\tthrow new InterruptedException();\n}\n```\n\n通过判断线程是否中断过,主动抛出中断异常,来让更上层的程序进行后续处理.\n\n---\n\n[练习的代码参见github](https://github.com/dressrosa/dailydemo)","slug":"something-about-interrupt","published":1,"updated":"2017-04-18T07:34:07.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxduh0009tojtltza3xpn","content":"<p>interrupt意思为中断,为线程运行时提供一个中断机制.<br>但是中断和阻塞是不一样的,线程的中断并没有结束或暂停线程,而是对线程设置了一个中断的信号,通过此信号来进行具体的其他操作.</p>\n<a id=\"more\"></a>\n<p>在Thread里面提供了三个方法:</p>\n<ol>\n<li>interrupt() 对一个线程进行中断操作,就需要调用此方法,设置中断信号</li>\n<li>interrupted() 判断线程是否设置过中断信号,返回true/false,同时清除1中方法设置的信号,所以连续俩次调用此方法后,第二次会返回false</li>\n<li>isInterrupted() 判断线程是否设置过中断信号,但并没有清除信号.</li>\n</ol>\n<p>所以当一个线程调用interrupt()的时候,其实就是设置了一个中断信号,然后来让线程知道有中断发生,好让其决定怎么去回应这个信号.</p>\n<p>1.所以interrupt适合用在join sleep wait这些阻塞型的方法,从而达到提前结束阻塞的目的.原因是 这种阻塞类的操作,在阻塞时调用interrupt()设置中断信号,会导致这些操作抛出interruptException,这样就能提前结束阻塞.</p>\n<p>2.在不是这些阻塞情况时,我们可以设置一个votatile变量,来表示结束状态,<br>然后我们调用interrupt()来发出信号,告诉程序后续处理.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class B extends Thread &#123;</div><div class=\"line\">\tprivate volatile boolean stop = false;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\tint i = 0;</div><div class=\"line\">\t\twhile (!stop) &#123;</div><div class=\"line\">\t\t\tfor (int a = 0; a &lt; 10000000; a++)</div><div class=\"line\">\t\t\t\tfor (int b = 0; b &lt; 5000000; b++) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;吃饭中..&quot; + i++);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void stoped() &#123;</div><div class=\"line\">\t\tstop = true;</div><div class=\"line\">\t\tthis.interrupt();//设置中断信号</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们在线程运行后可以这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">t2.start();</div><div class=\"line\">Thread.sleep(1000);</div><div class=\"line\">t.stoped();</div><div class=\"line\">if (t.isInterrupted()) &#123;</div><div class=\"line\">\tthrow new InterruptedException();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过判断线程是否中断过,主动抛出中断异常,来让更上层的程序进行后续处理.</p>\n<hr>\n<p><a href=\"https://github.com/dressrosa/dailydemo\" target=\"_blank\" rel=\"external\">练习的代码参见github</a></p>\n","excerpt":"<p>interrupt意思为中断,为线程运行时提供一个中断机制.<br>但是中断和阻塞是不一样的,线程的中断并没有结束或暂停线程,而是对线程设置了一个中断的信号,通过此信号来进行具体的其他操作.</p>","more":"<p>在Thread里面提供了三个方法:</p>\n<ol>\n<li>interrupt() 对一个线程进行中断操作,就需要调用此方法,设置中断信号</li>\n<li>interrupted() 判断线程是否设置过中断信号,返回true/false,同时清除1中方法设置的信号,所以连续俩次调用此方法后,第二次会返回false</li>\n<li>isInterrupted() 判断线程是否设置过中断信号,但并没有清除信号.</li>\n</ol>\n<p>所以当一个线程调用interrupt()的时候,其实就是设置了一个中断信号,然后来让线程知道有中断发生,好让其决定怎么去回应这个信号.</p>\n<p>1.所以interrupt适合用在join sleep wait这些阻塞型的方法,从而达到提前结束阻塞的目的.原因是 这种阻塞类的操作,在阻塞时调用interrupt()设置中断信号,会导致这些操作抛出interruptException,这样就能提前结束阻塞.</p>\n<p>2.在不是这些阻塞情况时,我们可以设置一个votatile变量,来表示结束状态,<br>然后我们调用interrupt()来发出信号,告诉程序后续处理.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class B extends Thread &#123;</div><div class=\"line\">\tprivate volatile boolean stop = false;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\tint i = 0;</div><div class=\"line\">\t\twhile (!stop) &#123;</div><div class=\"line\">\t\t\tfor (int a = 0; a &lt; 10000000; a++)</div><div class=\"line\">\t\t\t\tfor (int b = 0; b &lt; 5000000; b++) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;吃饭中..&quot; + i++);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void stoped() &#123;</div><div class=\"line\">\t\tstop = true;</div><div class=\"line\">\t\tthis.interrupt();//设置中断信号</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们在线程运行后可以这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">t2.start();</div><div class=\"line\">Thread.sleep(1000);</div><div class=\"line\">t.stoped();</div><div class=\"line\">if (t.isInterrupted()) &#123;</div><div class=\"line\">\tthrow new InterruptedException();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过判断线程是否中断过,主动抛出中断异常,来让更上层的程序进行后续处理.</p>\n<hr>\n<p><a href=\"https://github.com/dressrosa/dailydemo\">练习的代码参见github</a></p>"},{"title":"array转list的注意点","date":"2017-04-18T08:03:42.000Z","_content":"String phone = \"a,b,c,d\";\nArrays.asList(phone.split(\",\")); \n\n这个产生的是一个固定大小,不可变的数组 ,\n是无法进行增加,删除操作的,作用有限 ,jdk里面解释为:\n<!--more-->\n```\n@SafeVarargs\nReturns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray. The returned list is serializable and implements RandomAccess.\nThis method also provides a convenient way to create a fixed-size list initialized to contain several elements:\n     List<String> stooges = Arrays.asList(\"Larry\", \"Moe\", \"Curly\");\nParameters:\na the array by which the list will be backed\nReturns:\na list view of the specified array //只是作为一种view形式\n```\n  \n所以要进行操作要用这种:\n\n\n```\nLists.newArrayList(phone.split(\",\"));\n```\n\n\n```\n@GwtCompatible(serializable=true)\nCreates a mutableArrayList instance containing the given elements.\nNote: if mutability is not required and the elements are non-null, use an overload of ImmutableList.of() (for varargs) or ImmutableList.copyOf(Object[]) (for an array) instead.\nParameters:\nelements the elements that the list should contain, in order\nReturns:\na new ArrayList containing those elements\n```\n","source":"_posts/array-to-list.md","raw":"---\ntitle: array转list的注意点\ndate: 2017-04-18 16:03:42\ncategories: java\ntags: \n\t- list\n---\nString phone = \"a,b,c,d\";\nArrays.asList(phone.split(\",\")); \n\n这个产生的是一个固定大小,不可变的数组 ,\n是无法进行增加,删除操作的,作用有限 ,jdk里面解释为:\n<!--more-->\n```\n@SafeVarargs\nReturns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray. The returned list is serializable and implements RandomAccess.\nThis method also provides a convenient way to create a fixed-size list initialized to contain several elements:\n     List<String> stooges = Arrays.asList(\"Larry\", \"Moe\", \"Curly\");\nParameters:\na the array by which the list will be backed\nReturns:\na list view of the specified array //只是作为一种view形式\n```\n  \n所以要进行操作要用这种:\n\n\n```\nLists.newArrayList(phone.split(\",\"));\n```\n\n\n```\n@GwtCompatible(serializable=true)\nCreates a mutableArrayList instance containing the given elements.\nNote: if mutability is not required and the elements are non-null, use an overload of ImmutableList.of() (for varargs) or ImmutableList.copyOf(Object[]) (for an array) instead.\nParameters:\nelements the elements that the list should contain, in order\nReturns:\na new ArrayList containing those elements\n```\n","slug":"array-to-list","published":1,"updated":"2017-04-18T09:10:42.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxduh000ctojty2j0gcus","content":"<p>String phone = “a,b,c,d”;<br>Arrays.asList(phone.split(“,”)); </p>\n<p>这个产生的是一个固定大小,不可变的数组 ,<br>是无法进行增加,删除操作的,作用有限 ,jdk里面解释为:<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SafeVarargs</div><div class=\"line\">Returns a fixed-size list backed by the specified array. (Changes to the returned list &quot;write through&quot; to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray. The returned list is serializable and implements RandomAccess.</div><div class=\"line\">This method also provides a convenient way to create a fixed-size list initialized to contain several elements:</div><div class=\"line\">     List&lt;String&gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);</div><div class=\"line\">Parameters:</div><div class=\"line\">a the array by which the list will be backed</div><div class=\"line\">Returns:</div><div class=\"line\">a list view of the specified array //只是作为一种view形式</div></pre></td></tr></table></figure></p>\n<p>所以要进行操作要用这种:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lists.newArrayList(phone.split(&quot;,&quot;));</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@GwtCompatible(serializable=true)</div><div class=\"line\">Creates a mutableArrayList instance containing the given elements.</div><div class=\"line\">Note: if mutability is not required and the elements are non-null, use an overload of ImmutableList.of() (for varargs) or ImmutableList.copyOf(Object[]) (for an array) instead.</div><div class=\"line\">Parameters:</div><div class=\"line\">elements the elements that the list should contain, in order</div><div class=\"line\">Returns:</div><div class=\"line\">a new ArrayList containing those elements</div></pre></td></tr></table></figure>\n","excerpt":"<p>String phone = “a,b,c,d”;<br>Arrays.asList(phone.split(“,”)); </p>\n<p>这个产生的是一个固定大小,不可变的数组 ,<br>是无法进行增加,删除操作的,作用有限 ,jdk里面解释为:<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SafeVarargs</div><div class=\"line\">Returns a fixed-size list backed by the specified array. (Changes to the returned list &quot;write through&quot; to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray. The returned list is serializable and implements RandomAccess.</div><div class=\"line\">This method also provides a convenient way to create a fixed-size list initialized to contain several elements:</div><div class=\"line\">     List&lt;String&gt; stooges = Arrays.asList(&quot;Larry&quot;, &quot;Moe&quot;, &quot;Curly&quot;);</div><div class=\"line\">Parameters:</div><div class=\"line\">a the array by which the list will be backed</div><div class=\"line\">Returns:</div><div class=\"line\">a list view of the specified array //只是作为一种view形式</div></pre></td></tr></table></figure></p>\n<p>所以要进行操作要用这种:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lists.newArrayList(phone.split(&quot;,&quot;));</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@GwtCompatible(serializable=true)</div><div class=\"line\">Creates a mutableArrayList instance containing the given elements.</div><div class=\"line\">Note: if mutability is not required and the elements are non-null, use an overload of ImmutableList.of() (for varargs) or ImmutableList.copyOf(Object[]) (for an array) instead.</div><div class=\"line\">Parameters:</div><div class=\"line\">elements the elements that the list should contain, in order</div><div class=\"line\">Returns:</div><div class=\"line\">a new ArrayList containing those elements</div></pre></td></tr></table></figure>"},{"title":"前后台传参方式","date":"2017-04-18T08:07:05.000Z","_content":"记录一下几种前台传参到后台的方式: \n<!--more-->\n1.  \n```\nfunction xxx(item,entity) {\n   cargoEntity = entity;\n    $.ajax(\n      {\n        type: 'POST',\n        url: '${ctx}/pipeiliebiao/tBizPplb/goodsMatchList' ,\n        data:{\n         item : item\n        },\n       success: function(data){\n    if('' == data) {\n     alert(\"没有匹配信息 \");\n     $(\"#shipList\").html('');\n     return false;\n    }\n       for(var a = 0 ; a < data.length; a++) {\n         var item = data[a];\n         shipEntity=data[0];\n         var str = \"<tr><td><input type=\\\"radio\\\" value = \\\"\"+item.id+\"\\\" name = \\\"goods\\\" ></td>\";\n          str += \"<td>\"+item.salesMan+\"</td>\";\n       str += \"<td>\"+item.partnerName+\"</td>\";\n      str += \"<td>\"+item.hl+\"</td>\";\n      str += \"<td>\"+item.zhd+\"</td>\";\n      str += \"<td>\";\n      str += item.kbksrq;\n      str += \"</td>\";\n      str += \"<td>\"+item.hcxhg+\"</td>\";\n      str += \"<td>\"+item.yj+\"元/t</td> \"\n     str += \"<td>\"+(item.ppzt==0?'匹配':'未匹配')+\"</td>\"\n     str += \"<td>\"+item.contactName+\"</td>\"\n     str += \"<td>\"+item.fbsj+\"</td>\"\n     str += \"</tr>\";\n     $(\"#shipList\").html(str);\n        }\n       },\n       error:function(){\n        alert(\"没有匹配信息 \");\n       \n       },\n    // dataType: 'json'\n   });\n  };\n```\n\n2.  \n```\n$.post('${ctx}/pipeiliebiao/tBizPplb/profitCalPage',{item:item});\n```\n\n这俩种是通过ajax方法往后台传值,进行前后台局部的动态交互,\n但是这样就必须有回调函数,回调函数返回之后才会进行页面跳转,所以希望传值到后台跳转到别的页面是不行的,因为后台处理是再回调函数之前执行的. \n\n3.单纯的传参到后台进行处理:\n一般有form表单模式,不过这个再js里面无法用.\n可以这样:\n\n```\nwindow.location.href=\"${ctx}/pipeiliebiao/tBizPplb/profitCalPage?item=\"+item;\n```\n\n这样就能单纯的将参数传到后台,后台就可以处理后不管前端的东西了.\n","source":"_posts/transfer-params.md","raw":"---\ntitle: 前后台传参方式\ndate: 2017-04-18 16:07:05\ncategories: js\ntags: \n\t- ajax\n---\n记录一下几种前台传参到后台的方式: \n<!--more-->\n1.  \n```\nfunction xxx(item,entity) {\n   cargoEntity = entity;\n    $.ajax(\n      {\n        type: 'POST',\n        url: '${ctx}/pipeiliebiao/tBizPplb/goodsMatchList' ,\n        data:{\n         item : item\n        },\n       success: function(data){\n    if('' == data) {\n     alert(\"没有匹配信息 \");\n     $(\"#shipList\").html('');\n     return false;\n    }\n       for(var a = 0 ; a < data.length; a++) {\n         var item = data[a];\n         shipEntity=data[0];\n         var str = \"<tr><td><input type=\\\"radio\\\" value = \\\"\"+item.id+\"\\\" name = \\\"goods\\\" ></td>\";\n          str += \"<td>\"+item.salesMan+\"</td>\";\n       str += \"<td>\"+item.partnerName+\"</td>\";\n      str += \"<td>\"+item.hl+\"</td>\";\n      str += \"<td>\"+item.zhd+\"</td>\";\n      str += \"<td>\";\n      str += item.kbksrq;\n      str += \"</td>\";\n      str += \"<td>\"+item.hcxhg+\"</td>\";\n      str += \"<td>\"+item.yj+\"元/t</td> \"\n     str += \"<td>\"+(item.ppzt==0?'匹配':'未匹配')+\"</td>\"\n     str += \"<td>\"+item.contactName+\"</td>\"\n     str += \"<td>\"+item.fbsj+\"</td>\"\n     str += \"</tr>\";\n     $(\"#shipList\").html(str);\n        }\n       },\n       error:function(){\n        alert(\"没有匹配信息 \");\n       \n       },\n    // dataType: 'json'\n   });\n  };\n```\n\n2.  \n```\n$.post('${ctx}/pipeiliebiao/tBizPplb/profitCalPage',{item:item});\n```\n\n这俩种是通过ajax方法往后台传值,进行前后台局部的动态交互,\n但是这样就必须有回调函数,回调函数返回之后才会进行页面跳转,所以希望传值到后台跳转到别的页面是不行的,因为后台处理是再回调函数之前执行的. \n\n3.单纯的传参到后台进行处理:\n一般有form表单模式,不过这个再js里面无法用.\n可以这样:\n\n```\nwindow.location.href=\"${ctx}/pipeiliebiao/tBizPplb/profitCalPage?item=\"+item;\n```\n\n这样就能单纯的将参数传到后台,后台就可以处理后不管前端的东西了.\n","slug":"transfer-params","published":1,"updated":"2017-04-18T08:09:32.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxduh000etojtbzoknsas","content":"<p>记录一下几种前台传参到后台的方式:<br><a id=\"more\"></a></p>\n<ol>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">function xxx(item,entity) &#123;</div><div class=\"line\">   cargoEntity = entity;</div><div class=\"line\">    $.ajax(</div><div class=\"line\">      &#123;</div><div class=\"line\">        type: &apos;POST&apos;,</div><div class=\"line\">        url: &apos;$&#123;ctx&#125;/pipeiliebiao/tBizPplb/goodsMatchList&apos; ,</div><div class=\"line\">        data:&#123;</div><div class=\"line\">         item : item</div><div class=\"line\">        &#125;,</div><div class=\"line\">       success: function(data)&#123;</div><div class=\"line\">    if(&apos;&apos; == data) &#123;</div><div class=\"line\">     alert(&quot;没有匹配信息 &quot;);</div><div class=\"line\">     $(&quot;#shipList&quot;).html(&apos;&apos;);</div><div class=\"line\">     return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">       for(var a = 0 ; a &lt; data.length; a++) &#123;</div><div class=\"line\">         var item = data[a];</div><div class=\"line\">         shipEntity=data[0];</div><div class=\"line\">         var str = &quot;&lt;tr&gt;&lt;td&gt;&lt;input type=\\&quot;radio\\&quot; value = \\&quot;&quot;+item.id+&quot;\\&quot; name = \\&quot;goods\\&quot; &gt;&lt;/td&gt;&quot;;</div><div class=\"line\">          str += &quot;&lt;td&gt;&quot;+item.salesMan+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">       str += &quot;&lt;td&gt;&quot;+item.partnerName+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.hl+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.zhd+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;;</div><div class=\"line\">      str += item.kbksrq;</div><div class=\"line\">      str += &quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.hcxhg+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.yj+&quot;元/t&lt;/td&gt; &quot;</div><div class=\"line\">     str += &quot;&lt;td&gt;&quot;+(item.ppzt==0?&apos;匹配&apos;:&apos;未匹配&apos;)+&quot;&lt;/td&gt;&quot;</div><div class=\"line\">     str += &quot;&lt;td&gt;&quot;+item.contactName+&quot;&lt;/td&gt;&quot;</div><div class=\"line\">     str += &quot;&lt;td&gt;&quot;+item.fbsj+&quot;&lt;/td&gt;&quot;</div><div class=\"line\">     str += &quot;&lt;/tr&gt;&quot;;</div><div class=\"line\">     $(&quot;#shipList&quot;).html(str);</div><div class=\"line\">        &#125;</div><div class=\"line\">       &#125;,</div><div class=\"line\">       error:function()&#123;</div><div class=\"line\">        alert(&quot;没有匹配信息 &quot;);</div><div class=\"line\">       </div><div class=\"line\">       &#125;,</div><div class=\"line\">    // dataType: &apos;json&apos;</div><div class=\"line\">   &#125;);</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.post(&apos;$&#123;ctx&#125;/pipeiliebiao/tBizPplb/profitCalPage&apos;,&#123;item:item&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这俩种是通过ajax方法往后台传值,进行前后台局部的动态交互,<br>但是这样就必须有回调函数,回调函数返回之后才会进行页面跳转,所以希望传值到后台跳转到别的页面是不行的,因为后台处理是再回调函数之前执行的. </p>\n<p>3.单纯的传参到后台进行处理:<br>一般有form表单模式,不过这个再js里面无法用.<br>可以这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location.href=&quot;$&#123;ctx&#125;/pipeiliebiao/tBizPplb/profitCalPage?item=&quot;+item;</div></pre></td></tr></table></figure>\n<p>这样就能单纯的将参数传到后台,后台就可以处理后不管前端的东西了.</p>\n","excerpt":"<p>记录一下几种前台传参到后台的方式:<br>","more":"</p>\n<ol>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">function xxx(item,entity) &#123;</div><div class=\"line\">   cargoEntity = entity;</div><div class=\"line\">    $.ajax(</div><div class=\"line\">      &#123;</div><div class=\"line\">        type: &apos;POST&apos;,</div><div class=\"line\">        url: &apos;$&#123;ctx&#125;/pipeiliebiao/tBizPplb/goodsMatchList&apos; ,</div><div class=\"line\">        data:&#123;</div><div class=\"line\">         item : item</div><div class=\"line\">        &#125;,</div><div class=\"line\">       success: function(data)&#123;</div><div class=\"line\">    if(&apos;&apos; == data) &#123;</div><div class=\"line\">     alert(&quot;没有匹配信息 &quot;);</div><div class=\"line\">     $(&quot;#shipList&quot;).html(&apos;&apos;);</div><div class=\"line\">     return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">       for(var a = 0 ; a &lt; data.length; a++) &#123;</div><div class=\"line\">         var item = data[a];</div><div class=\"line\">         shipEntity=data[0];</div><div class=\"line\">         var str = &quot;&lt;tr&gt;&lt;td&gt;&lt;input type=\\&quot;radio\\&quot; value = \\&quot;&quot;+item.id+&quot;\\&quot; name = \\&quot;goods\\&quot; &gt;&lt;/td&gt;&quot;;</div><div class=\"line\">          str += &quot;&lt;td&gt;&quot;+item.salesMan+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">       str += &quot;&lt;td&gt;&quot;+item.partnerName+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.hl+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.zhd+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;;</div><div class=\"line\">      str += item.kbksrq;</div><div class=\"line\">      str += &quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.hcxhg+&quot;&lt;/td&gt;&quot;;</div><div class=\"line\">      str += &quot;&lt;td&gt;&quot;+item.yj+&quot;元/t&lt;/td&gt; &quot;</div><div class=\"line\">     str += &quot;&lt;td&gt;&quot;+(item.ppzt==0?&apos;匹配&apos;:&apos;未匹配&apos;)+&quot;&lt;/td&gt;&quot;</div><div class=\"line\">     str += &quot;&lt;td&gt;&quot;+item.contactName+&quot;&lt;/td&gt;&quot;</div><div class=\"line\">     str += &quot;&lt;td&gt;&quot;+item.fbsj+&quot;&lt;/td&gt;&quot;</div><div class=\"line\">     str += &quot;&lt;/tr&gt;&quot;;</div><div class=\"line\">     $(&quot;#shipList&quot;).html(str);</div><div class=\"line\">        &#125;</div><div class=\"line\">       &#125;,</div><div class=\"line\">       error:function()&#123;</div><div class=\"line\">        alert(&quot;没有匹配信息 &quot;);</div><div class=\"line\">       </div><div class=\"line\">       &#125;,</div><div class=\"line\">    // dataType: &apos;json&apos;</div><div class=\"line\">   &#125;);</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.post(&apos;$&#123;ctx&#125;/pipeiliebiao/tBizPplb/profitCalPage&apos;,&#123;item:item&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这俩种是通过ajax方法往后台传值,进行前后台局部的动态交互,<br>但是这样就必须有回调函数,回调函数返回之后才会进行页面跳转,所以希望传值到后台跳转到别的页面是不行的,因为后台处理是再回调函数之前执行的. </p>\n<p>3.单纯的传参到后台进行处理:<br>一般有form表单模式,不过这个再js里面无法用.<br>可以这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.location.href=&quot;$&#123;ctx&#125;/pipeiliebiao/tBizPplb/profitCalPage?item=&quot;+item;</div></pre></td></tr></table></figure>\n<p>这样就能单纯的将参数传到后台,后台就可以处理后不管前端的东西了.</p>"},{"title":"CountDownLatch和CyclicBarrier原理的分析理解","date":"2017-04-18T07:44:25.000Z","_content":" \n   学concurrent并发包的时候,看到countDownLatch和CyclicBarrier有些相似的地方.所以放在一起进行学习分析一下.\n  首先看一下jdk注释的第一句话简单阐明二者各自的意思:\n \n\n```\nCountDowLatch\nA synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes\n\nCyclicBarrier\nA synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point\n\n```\n <!--more-->\n  简单的意思就是CountDownLatch(下文用CDL)用于同步时一个或多个线程等待其他线程的某些操作完后才继续进行,而CyclicBarrier(下文用CB)用于若干线程需要阻塞在一个地方,够数了然后在同时进行.\n **先分析CDL**.\n   用法上CDL初始化必须带有一个count,表示需要countDown方法需要调用几次后才能接着进行.\n   主要的api有:\n countDown(). 用来其他线程调用,没调用一次count--,直到为0后,CDL作用消失,线程继续进行\n \n await().用于线程设置在哪个地方设置阻塞等待,类似对象的wait()函数.\n   \n   所以基本的用法伪代码如下:\n CDL latch = new CDL(2);\n thread A {\n\t  ......\n\t  latch.await();\n\t  .......\n }\n thread B {\n\t ......\n\t latch.countDown();\n\t ......\n }\n thread C {\n\t ......\n\t latch.countDown();\n\t ......\n }\n  这样在thread B ,C都调用过countDown()后,A才能继续进行.\n然后,我们通过看一下源码来理解一下其中的过程.\n\n```\n    public CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n```\n  构造方异法里面我们看到其实是实现了内部类Sync,这个类其实是继承了AbstractQueuedSynchronizer即AQS,这是并发包里面很多类实现的基础.这里留着改天深入研究一下.我们先看看这个Sync的实现.\n\n```\n Sync(int count) {\n            setState(count);\n        }\n\n        int getCount() {\n            return getState();\n        }\n\n        protected int tryAcquireShared(int acquires) {\n            return (getState() == 0) ? 1 : -1;\n        }\n\n        protected boolean tryReleaseShared(int releases) {\n            // Decrement count; signal when transition to zero\n            for (;;) {\n                int c = getState();\n                if (c == 0)\n                    return false;\n                int nextc = c-1;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\n  我们通过Sync的方法来看await()源码:\n\n```\n public void await() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n }\n```\n这里sync调用的方法其实是父类AQS里面的方法,\n\n```\n   public final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\n  我们看到其实这里还是通过调用tryAcquireShared方法实现的,而在AQS里面tryAcquireShared方法还是需要子类实现的,也就是最后调用的就是Sync里面的tryAcquireShared,我们回到Sync源码里面.\n这个Sync在构造函数里面设置线程state就是count,\n  再看tryAcquireShared方法,里面的形参acquires其实根本没用到,只是判断了state即count数等于0,也就是这里线程state其实没有原来的意思了,只是用于count计数而已.\n  通过上面acquireSharedInterruptibly方法我们可以看出,只要\ntryAcquireShared大于0(即count还不是0)的话CDL的await()方法就没有阻塞,真正的阻塞实现是在doAcquireSharedInterruptibly(1)里面.这两个要具体分析就要扯到AQS的实现了,我们这里只要知道这里就是CDL产生阻塞的原因就行了.\n分析完await()方法后,我们来看一下countDown():\n\n```\npublic void countDown() {\n        sync.releaseShared(1);\n    }\n```\n这里调用的依旧是sync父类里面的方法.在父类AQS里面的实现如下:\n\n```\n public final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n  我们看到其实核心还是调用sync里面tryReleaseShared,\n回到sync里面的实现\n\n```\n protected boolean tryReleaseShared(int releases) {\n            // Decrement count; signal when transition to zero\n            for (;;) {\n                int c = getState(); (1)\n                if (c == 0) (2)\n                    return false; (3)\n                int nextc = c-1; (4)\n                if (compareAndSetState(c, nextc)) (5)\n                    return nextc == 0; (6)\n            }\n        }\n```\n  这里没有使用锁来实现,而是通过CAS(即比较交换)算法来实现,CAS的具体实现是调用更底层的UnSafe类,我们只要知道这是一种不通过锁来实现同步的方法,所以相对比较高效.\n1,2,3处表示先检查 count是否为0,也就是说到CDL不在阻塞的时候在调用countDown方法不会在起作用了,这也意味着CDL是不能重用的.\n5,6处通过CAS方法使得count减1,当然这里其实不是真的count减了1,而是state,只是这里state就是代表了count的意思而已.\n到这里为止,CDL的主要方法和原理都分析完了,我们看到其内部实现完全依靠Sync,也就是AQS,但这里Sync的实现也非常简练易懂.\n**接下来我们来分析CB**\n  虽然CB和CDL意思有些相似,但是实现上确不一样.\nCB同样实现了一个内部类Generation,意为一代,但是主要功能还是通过reentranLock实现的.\n先来看看CB源码里面定义的几个遍量:\n\n```\n    private final ReentrantLock lock = new ReentrantLock();\n    private final Condition trip = lock.newCondition();\n    private final int parties;\n    private final Runnable barrierCommand;\n    private Generation generation = new Generation();\n    private int count;\n```\nlock用来加锁\ntrip这里英文不是旅游的意思,而是绊倒的意思,也许正好和Barrier(栅栏)相对应吧,栅栏几个栏杆挡着不给你走,来一个线程绊倒一个栏杆,倒完了路就通了.\nparties 英文意党羽,代表这里需要挡住的线程数量,这个值在初始化后就不会变了,\nbarrierCommand:栅栏通了后就会执行这个命令.\ngeneration意为一代,代表此刻这个栅栏\ncount 线程的数量,初始化时和parties相等\n\n\n再看CB的两个构造函数:\n\n```\n public CyclicBarrier(int parties) {\n        this(parties, null);\n    }\n    public CyclicBarrier(int parties, Runnable barrierAction) {\n        if (parties <= 0) throw new IllegalArgumentException();\n        this.parties = parties;\n        this.count = parties;\n        this.barrierCommand = barrierAction;\n    }\n```\n  我们主要看第二个构造函数,初始化时parties赋值给了count,我们上面说的parties不会变的原因是程序最后修改的都是count.\n\n再来看CB的主要几个方法:\ngetPaties()获取要拦的线程的数量,返回的parties,也就是初始化的数量.\n\nisBroken()判断栅栏是否坏了,是通过lock锁实现的,返回的是Generation类里面唯一的变量broken,同时我们看看Generation类的定义,非常简单:\n\n```\n  private static class Generation {\n        boolean broken = false;\n    }\n```\n这个内部类就持有一个bool变量,代表这个栅栏有没有坏掉(因为某些异常).\n\nreset() 重置栅栏,意思就是一切重新开始了,之前拦截的都不算数了.这也和CB的名字Cyclic(循环)相符,也是CB的最大特点,她是可以一直重复使用的.reset方法同样用了lock锁,核心调用了两个私有方法,breakBarrier()和nextGeneration() (破坏栅栏和生成新的栅栏)\n\n```\n    public void reset() {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            breakBarrier();   // break the current generation\n            nextGeneration(); // start a new generation\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n我们来看看这俩个私有方法的实现:\n\n```\n   private void breakBarrier() {\n        generation.broken = true;\n        count = parties;\n        trip.signalAll();\n    }\n   private void nextGeneration() {\n        trip.signalAll();\n        count = parties;\n        generation = new Generation();\n    }\n```\n  breakBarrier首先设置generation为坏掉的状态,然后重置count为初始化数量,最后通过trip这个Condition来通知所有的线程这个栅栏坏了.\n  nextGeneration用在代表目前的栅栏坏掉或者目的达成了后,重新开始设置新的栅栏,先通过trip所有线程栅栏已经可以通过了,然后重置count,生成新的栅栏.\n  最后我们看看核心的方法也就是用来拦住线程的await方法,这个方法有俩种 ,一个带有时间限制,一个不带,但是都只是调用了私有方法dowait,所以我们只要看dowait方法就行了.\n\n```\n private int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            final Generation g = generation;\n\n            if (g.broken) (1)\n                throw new BrokenBarrierException();\n\n            if (Thread.interrupted()) { (2)\n                breakBarrier();\n                throw new InterruptedException();\n            }\n\n            int index = --count;(3)\n            if (index == 0) {  // tripped\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)\n                        command.run();\n                    ranAction = true;\n                    nextGeneration();(4)\n                    return 0;\n                } finally {\n                    if (!ranAction) (5)\n                        breakBarrier();\n                }\n            }\n\n            // loop until tripped, broken, interrupted, or timed out\n            for (;;) {(6)\n                try {\n                    if (!timed)\n                        trip.await();\n                    else if (nanos > 0L)\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    if (g == generation && ! g.broken) {(7)\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                        // We're about to finish waiting even if we had not\n                        // been interrupted, so this interrupt is deemed to\n                        // \"belong\" to subsequent execution.\n                        Thread.currentThread().interrupt();(8)\n                    }\n                }\n\n                if (g.broken)\n                    throw new BrokenBarrierException();\n\n                if (g != generation)\n                    return index;\n\n                if (timed && nanos <= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n\n```\n  核心依然是用来lock锁来阻塞线程.\n  我们先来看看这句代码 final Generation g = generation;讲这个意思是jdk很多地方都在方法内部通过final局部变量的方式引用全局变量,这样做的好处就是一是提高效率,二是对垃圾回收也有好处(不过这里的确需要一个g的局部变量,后面会讲到),这样的方式我看到了很多次,也算一种编程技巧吧.\n  接下来的(1) (2)两处意思是如果栅栏坏了或者当前线程中断了都会导致栅栏失效,一切重来.(3)处的意思是每一个线程调用到await()时,count都会减少1,当减到0时(栅栏任务完成),接下来判断了是否有command命令需要执行.这些都完成后执行(4)处nextGeneration()重新生成栅栏.\n  (5)处代表了在command运行的时候发生了某些异常,导致没有正常生成nextGeneration,那么就破坏栅栏,重新来过.\n  最后我们看(6)处,这里通过一个for死循环来进行线程的阻塞判断操作,先是判断有没有设置时间限制,在线程阻塞时遇到InterruptedException(中断异常),捕获异常后里面有个if/else,\n这里分为两种情况,一种是当前线程在await的时候出现了中断,一种是别的线程出现了中断操作.\n1.当是别的线程中断时,在这个时候栅栏还没有生成新的generation且没坏,那么就需要当前线程破坏栅栏了.\n2.当是自己的中断,异常捕获后,中断标记会被清除,所以需要再次主动中断恢复中断标记,这里jdk里面还专门做了解释,并说是属于后来的执行动作,也就是说是为了通知其他线程捕获异常来破坏栅栏.\n\n最后依然是对栅栏进行一些异常情况的判断.\n\n  至此CDL和CB都分析完了,也是自己的一些简单的理解,如若不对,请看到的人能耐心指教一下.下面贴出我写的一个中国式过马路的例子来将二者结合起来的用法供大家参考.\n\n```\nclass Person implements Runnable {\n\n\tprivate TrafficLight light;\n\tprivate String name;\n\n\tpublic Person(TrafficLight light) {\n\t\tthis.light = light;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(name + \"等红灯中.....\");\n\t\tlight.peopleWaitRedLight();\n\t\tSystem.out.println(name + \"过马路....哒哒哒...\");\n\n\t}\n}\n\nclass Driver implements Runnable {\n\tprivate TrafficLight light;\n\n\tpublic Driver(TrafficLight light) {\n\t\tthis.light = light;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"司机等红灯中...烦烦烦...\");\n\t\tlight.driverWaitRedLight();\n\t\tSystem.out.println(\"司机过马路喽...嘟嘟嘟...\");\n\t}\n}\n\nclass TrafficLight {\n\tprivate CyclicBarrier barrier;\n\tprivate CountDownLatch latch;\n\n\tpublic TrafficLight(CyclicBarrier barrier, CountDownLatch latch) {\n\t\tthis.barrier = barrier;\n\t\tthis.latch = latch;\n\t}\n\n\tpublic void driverWaitRedLight() {\n\t\ttry {\n\n\t\t\tlatch.await();\n\t\t\tThread.sleep(1);// 让人完全走过去\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void peopleWaitRedLight() {\n\t\ttry {\n\t\t\tthis.barrier.await();\n\t\t\tSystem.out.println(\"凑够数了,大家一起闯红灯了.\");\n\t\t} catch (InterruptedException | BrokenBarrierException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (latch != null) {\n\t\t\t\tlatch.countDown();\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nmain函数\n\tpublic static void main(String args[]) throws Exception {\n\t\tList<Person> list = new ArrayList<>();\n\t\tCyclicBarrier barrier = new CyclicBarrier(5);\n\t\tCountDownLatch latch = new CountDownLatch(10);\n\t\tTrafficLight light = new TrafficLight(barrier, latch);\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tlist.add(new Person(light));\n\t\t}\n\t\tDriver driver = new Driver(light);\n\t\tnew Thread(driver).start();\n\t\tThread t = null;\n\t\tfor (Person p : list) {\n\t\t\tp.setName(\"p\" + (list.indexOf(p) + 1));\n\t\t\tt = new Thread(p);\n\t\t\tt.start();\n\t\t\tThread.sleep(500);// 每过500ms来一个人\n\t\t}\n\n\t}\n```","source":"_posts/summary-of-cdl-cb.md","raw":"---\ntitle: CountDownLatch和CyclicBarrier原理的分析理解\ndate: 2017-04-18 15:44:25\ncategories: java\ntags: \n    - java\n---\n \n   学concurrent并发包的时候,看到countDownLatch和CyclicBarrier有些相似的地方.所以放在一起进行学习分析一下.\n  首先看一下jdk注释的第一句话简单阐明二者各自的意思:\n \n\n```\nCountDowLatch\nA synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes\n\nCyclicBarrier\nA synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point\n\n```\n <!--more-->\n  简单的意思就是CountDownLatch(下文用CDL)用于同步时一个或多个线程等待其他线程的某些操作完后才继续进行,而CyclicBarrier(下文用CB)用于若干线程需要阻塞在一个地方,够数了然后在同时进行.\n **先分析CDL**.\n   用法上CDL初始化必须带有一个count,表示需要countDown方法需要调用几次后才能接着进行.\n   主要的api有:\n countDown(). 用来其他线程调用,没调用一次count--,直到为0后,CDL作用消失,线程继续进行\n \n await().用于线程设置在哪个地方设置阻塞等待,类似对象的wait()函数.\n   \n   所以基本的用法伪代码如下:\n CDL latch = new CDL(2);\n thread A {\n\t  ......\n\t  latch.await();\n\t  .......\n }\n thread B {\n\t ......\n\t latch.countDown();\n\t ......\n }\n thread C {\n\t ......\n\t latch.countDown();\n\t ......\n }\n  这样在thread B ,C都调用过countDown()后,A才能继续进行.\n然后,我们通过看一下源码来理解一下其中的过程.\n\n```\n    public CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n```\n  构造方异法里面我们看到其实是实现了内部类Sync,这个类其实是继承了AbstractQueuedSynchronizer即AQS,这是并发包里面很多类实现的基础.这里留着改天深入研究一下.我们先看看这个Sync的实现.\n\n```\n Sync(int count) {\n            setState(count);\n        }\n\n        int getCount() {\n            return getState();\n        }\n\n        protected int tryAcquireShared(int acquires) {\n            return (getState() == 0) ? 1 : -1;\n        }\n\n        protected boolean tryReleaseShared(int releases) {\n            // Decrement count; signal when transition to zero\n            for (;;) {\n                int c = getState();\n                if (c == 0)\n                    return false;\n                int nextc = c-1;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\n  我们通过Sync的方法来看await()源码:\n\n```\n public void await() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n }\n```\n这里sync调用的方法其实是父类AQS里面的方法,\n\n```\n   public final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\n  我们看到其实这里还是通过调用tryAcquireShared方法实现的,而在AQS里面tryAcquireShared方法还是需要子类实现的,也就是最后调用的就是Sync里面的tryAcquireShared,我们回到Sync源码里面.\n这个Sync在构造函数里面设置线程state就是count,\n  再看tryAcquireShared方法,里面的形参acquires其实根本没用到,只是判断了state即count数等于0,也就是这里线程state其实没有原来的意思了,只是用于count计数而已.\n  通过上面acquireSharedInterruptibly方法我们可以看出,只要\ntryAcquireShared大于0(即count还不是0)的话CDL的await()方法就没有阻塞,真正的阻塞实现是在doAcquireSharedInterruptibly(1)里面.这两个要具体分析就要扯到AQS的实现了,我们这里只要知道这里就是CDL产生阻塞的原因就行了.\n分析完await()方法后,我们来看一下countDown():\n\n```\npublic void countDown() {\n        sync.releaseShared(1);\n    }\n```\n这里调用的依旧是sync父类里面的方法.在父类AQS里面的实现如下:\n\n```\n public final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n  我们看到其实核心还是调用sync里面tryReleaseShared,\n回到sync里面的实现\n\n```\n protected boolean tryReleaseShared(int releases) {\n            // Decrement count; signal when transition to zero\n            for (;;) {\n                int c = getState(); (1)\n                if (c == 0) (2)\n                    return false; (3)\n                int nextc = c-1; (4)\n                if (compareAndSetState(c, nextc)) (5)\n                    return nextc == 0; (6)\n            }\n        }\n```\n  这里没有使用锁来实现,而是通过CAS(即比较交换)算法来实现,CAS的具体实现是调用更底层的UnSafe类,我们只要知道这是一种不通过锁来实现同步的方法,所以相对比较高效.\n1,2,3处表示先检查 count是否为0,也就是说到CDL不在阻塞的时候在调用countDown方法不会在起作用了,这也意味着CDL是不能重用的.\n5,6处通过CAS方法使得count减1,当然这里其实不是真的count减了1,而是state,只是这里state就是代表了count的意思而已.\n到这里为止,CDL的主要方法和原理都分析完了,我们看到其内部实现完全依靠Sync,也就是AQS,但这里Sync的实现也非常简练易懂.\n**接下来我们来分析CB**\n  虽然CB和CDL意思有些相似,但是实现上确不一样.\nCB同样实现了一个内部类Generation,意为一代,但是主要功能还是通过reentranLock实现的.\n先来看看CB源码里面定义的几个遍量:\n\n```\n    private final ReentrantLock lock = new ReentrantLock();\n    private final Condition trip = lock.newCondition();\n    private final int parties;\n    private final Runnable barrierCommand;\n    private Generation generation = new Generation();\n    private int count;\n```\nlock用来加锁\ntrip这里英文不是旅游的意思,而是绊倒的意思,也许正好和Barrier(栅栏)相对应吧,栅栏几个栏杆挡着不给你走,来一个线程绊倒一个栏杆,倒完了路就通了.\nparties 英文意党羽,代表这里需要挡住的线程数量,这个值在初始化后就不会变了,\nbarrierCommand:栅栏通了后就会执行这个命令.\ngeneration意为一代,代表此刻这个栅栏\ncount 线程的数量,初始化时和parties相等\n\n\n再看CB的两个构造函数:\n\n```\n public CyclicBarrier(int parties) {\n        this(parties, null);\n    }\n    public CyclicBarrier(int parties, Runnable barrierAction) {\n        if (parties <= 0) throw new IllegalArgumentException();\n        this.parties = parties;\n        this.count = parties;\n        this.barrierCommand = barrierAction;\n    }\n```\n  我们主要看第二个构造函数,初始化时parties赋值给了count,我们上面说的parties不会变的原因是程序最后修改的都是count.\n\n再来看CB的主要几个方法:\ngetPaties()获取要拦的线程的数量,返回的parties,也就是初始化的数量.\n\nisBroken()判断栅栏是否坏了,是通过lock锁实现的,返回的是Generation类里面唯一的变量broken,同时我们看看Generation类的定义,非常简单:\n\n```\n  private static class Generation {\n        boolean broken = false;\n    }\n```\n这个内部类就持有一个bool变量,代表这个栅栏有没有坏掉(因为某些异常).\n\nreset() 重置栅栏,意思就是一切重新开始了,之前拦截的都不算数了.这也和CB的名字Cyclic(循环)相符,也是CB的最大特点,她是可以一直重复使用的.reset方法同样用了lock锁,核心调用了两个私有方法,breakBarrier()和nextGeneration() (破坏栅栏和生成新的栅栏)\n\n```\n    public void reset() {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            breakBarrier();   // break the current generation\n            nextGeneration(); // start a new generation\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n我们来看看这俩个私有方法的实现:\n\n```\n   private void breakBarrier() {\n        generation.broken = true;\n        count = parties;\n        trip.signalAll();\n    }\n   private void nextGeneration() {\n        trip.signalAll();\n        count = parties;\n        generation = new Generation();\n    }\n```\n  breakBarrier首先设置generation为坏掉的状态,然后重置count为初始化数量,最后通过trip这个Condition来通知所有的线程这个栅栏坏了.\n  nextGeneration用在代表目前的栅栏坏掉或者目的达成了后,重新开始设置新的栅栏,先通过trip所有线程栅栏已经可以通过了,然后重置count,生成新的栅栏.\n  最后我们看看核心的方法也就是用来拦住线程的await方法,这个方法有俩种 ,一个带有时间限制,一个不带,但是都只是调用了私有方法dowait,所以我们只要看dowait方法就行了.\n\n```\n private int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            final Generation g = generation;\n\n            if (g.broken) (1)\n                throw new BrokenBarrierException();\n\n            if (Thread.interrupted()) { (2)\n                breakBarrier();\n                throw new InterruptedException();\n            }\n\n            int index = --count;(3)\n            if (index == 0) {  // tripped\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)\n                        command.run();\n                    ranAction = true;\n                    nextGeneration();(4)\n                    return 0;\n                } finally {\n                    if (!ranAction) (5)\n                        breakBarrier();\n                }\n            }\n\n            // loop until tripped, broken, interrupted, or timed out\n            for (;;) {(6)\n                try {\n                    if (!timed)\n                        trip.await();\n                    else if (nanos > 0L)\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    if (g == generation && ! g.broken) {(7)\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                        // We're about to finish waiting even if we had not\n                        // been interrupted, so this interrupt is deemed to\n                        // \"belong\" to subsequent execution.\n                        Thread.currentThread().interrupt();(8)\n                    }\n                }\n\n                if (g.broken)\n                    throw new BrokenBarrierException();\n\n                if (g != generation)\n                    return index;\n\n                if (timed && nanos <= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n\n```\n  核心依然是用来lock锁来阻塞线程.\n  我们先来看看这句代码 final Generation g = generation;讲这个意思是jdk很多地方都在方法内部通过final局部变量的方式引用全局变量,这样做的好处就是一是提高效率,二是对垃圾回收也有好处(不过这里的确需要一个g的局部变量,后面会讲到),这样的方式我看到了很多次,也算一种编程技巧吧.\n  接下来的(1) (2)两处意思是如果栅栏坏了或者当前线程中断了都会导致栅栏失效,一切重来.(3)处的意思是每一个线程调用到await()时,count都会减少1,当减到0时(栅栏任务完成),接下来判断了是否有command命令需要执行.这些都完成后执行(4)处nextGeneration()重新生成栅栏.\n  (5)处代表了在command运行的时候发生了某些异常,导致没有正常生成nextGeneration,那么就破坏栅栏,重新来过.\n  最后我们看(6)处,这里通过一个for死循环来进行线程的阻塞判断操作,先是判断有没有设置时间限制,在线程阻塞时遇到InterruptedException(中断异常),捕获异常后里面有个if/else,\n这里分为两种情况,一种是当前线程在await的时候出现了中断,一种是别的线程出现了中断操作.\n1.当是别的线程中断时,在这个时候栅栏还没有生成新的generation且没坏,那么就需要当前线程破坏栅栏了.\n2.当是自己的中断,异常捕获后,中断标记会被清除,所以需要再次主动中断恢复中断标记,这里jdk里面还专门做了解释,并说是属于后来的执行动作,也就是说是为了通知其他线程捕获异常来破坏栅栏.\n\n最后依然是对栅栏进行一些异常情况的判断.\n\n  至此CDL和CB都分析完了,也是自己的一些简单的理解,如若不对,请看到的人能耐心指教一下.下面贴出我写的一个中国式过马路的例子来将二者结合起来的用法供大家参考.\n\n```\nclass Person implements Runnable {\n\n\tprivate TrafficLight light;\n\tprivate String name;\n\n\tpublic Person(TrafficLight light) {\n\t\tthis.light = light;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(name + \"等红灯中.....\");\n\t\tlight.peopleWaitRedLight();\n\t\tSystem.out.println(name + \"过马路....哒哒哒...\");\n\n\t}\n}\n\nclass Driver implements Runnable {\n\tprivate TrafficLight light;\n\n\tpublic Driver(TrafficLight light) {\n\t\tthis.light = light;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"司机等红灯中...烦烦烦...\");\n\t\tlight.driverWaitRedLight();\n\t\tSystem.out.println(\"司机过马路喽...嘟嘟嘟...\");\n\t}\n}\n\nclass TrafficLight {\n\tprivate CyclicBarrier barrier;\n\tprivate CountDownLatch latch;\n\n\tpublic TrafficLight(CyclicBarrier barrier, CountDownLatch latch) {\n\t\tthis.barrier = barrier;\n\t\tthis.latch = latch;\n\t}\n\n\tpublic void driverWaitRedLight() {\n\t\ttry {\n\n\t\t\tlatch.await();\n\t\t\tThread.sleep(1);// 让人完全走过去\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void peopleWaitRedLight() {\n\t\ttry {\n\t\t\tthis.barrier.await();\n\t\t\tSystem.out.println(\"凑够数了,大家一起闯红灯了.\");\n\t\t} catch (InterruptedException | BrokenBarrierException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (latch != null) {\n\t\t\t\tlatch.countDown();\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nmain函数\n\tpublic static void main(String args[]) throws Exception {\n\t\tList<Person> list = new ArrayList<>();\n\t\tCyclicBarrier barrier = new CyclicBarrier(5);\n\t\tCountDownLatch latch = new CountDownLatch(10);\n\t\tTrafficLight light = new TrafficLight(barrier, latch);\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tlist.add(new Person(light));\n\t\t}\n\t\tDriver driver = new Driver(light);\n\t\tnew Thread(driver).start();\n\t\tThread t = null;\n\t\tfor (Person p : list) {\n\t\t\tp.setName(\"p\" + (list.indexOf(p) + 1));\n\t\t\tt = new Thread(p);\n\t\t\tt.start();\n\t\t\tThread.sleep(500);// 每过500ms来一个人\n\t\t}\n\n\t}\n```","slug":"summary-of-cdl-cb","published":1,"updated":"2017-04-18T07:47:46.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1nbxduh000htojt76k061gg","content":"<p>   学concurrent并发包的时候,看到countDownLatch和CyclicBarrier有些相似的地方.所以放在一起进行学习分析一下.<br>  首先看一下jdk注释的第一句话简单阐明二者各自的意思:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CountDowLatch</div><div class=\"line\">A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes</div><div class=\"line\"></div><div class=\"line\">CyclicBarrier</div><div class=\"line\">A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point</div></pre></td></tr></table></figure>\n <a id=\"more\"></a>\n<p>  简单的意思就是CountDownLatch(下文用CDL)用于同步时一个或多个线程等待其他线程的某些操作完后才继续进行,而CyclicBarrier(下文用CB)用于若干线程需要阻塞在一个地方,够数了然后在同时进行.<br> <strong>先分析CDL</strong>.<br>   用法上CDL初始化必须带有一个count,表示需要countDown方法需要调用几次后才能接着进行.<br>   主要的api有:<br> countDown(). 用来其他线程调用,没调用一次count–,直到为0后,CDL作用消失,线程继续进行</p>\n<p> await().用于线程设置在哪个地方设置阻塞等待,类似对象的wait()函数.</p>\n<p>   所以基本的用法伪代码如下:<br> CDL latch = new CDL(2);<br> thread A {<br>      ……<br>      latch.await();<br>      …….<br> }<br> thread B {<br>     ……<br>     latch.countDown();<br>     ……<br> }<br> thread C {<br>     ……<br>     latch.countDown();<br>     ……<br> }<br>  这样在thread B ,C都调用过countDown()后,A才能继续进行.<br>然后,我们通过看一下源码来理解一下其中的过程.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CountDownLatch(int count) &#123;</div><div class=\"line\">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class=\"line\">    this.sync = new Sync(count);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  构造方异法里面我们看到其实是实现了内部类Sync,这个类其实是继承了AbstractQueuedSynchronizer即AQS,这是并发包里面很多类实现的基础.这里留着改天深入研究一下.我们先看看这个Sync的实现.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sync(int count) &#123;</div><div class=\"line\">           setState(count);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       int getCount() &#123;</div><div class=\"line\">           return getState();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">           return (getState() == 0) ? 1 : -1;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">           // Decrement count; signal when transition to zero</div><div class=\"line\">           for (;;) &#123;</div><div class=\"line\">               int c = getState();</div><div class=\"line\">               if (c == 0)</div><div class=\"line\">                   return false;</div><div class=\"line\">               int nextc = c-1;</div><div class=\"line\">               if (compareAndSetState(c, nextc))</div><div class=\"line\">                   return nextc == 0;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>  我们通过Sync的方法来看await()源码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void await() throws InterruptedException &#123;</div><div class=\"line\">       sync.acquireSharedInterruptibly(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里sync调用的方法其实是父类AQS里面的方法,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireSharedInterruptibly(int arg)</div><div class=\"line\">         throws InterruptedException &#123;</div><div class=\"line\">     if (Thread.interrupted())</div><div class=\"line\">         throw new InterruptedException();</div><div class=\"line\">     if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">         doAcquireSharedInterruptibly(arg);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>  我们看到其实这里还是通过调用tryAcquireShared方法实现的,而在AQS里面tryAcquireShared方法还是需要子类实现的,也就是最后调用的就是Sync里面的tryAcquireShared,我们回到Sync源码里面.<br>这个Sync在构造函数里面设置线程state就是count,<br>  再看tryAcquireShared方法,里面的形参acquires其实根本没用到,只是判断了state即count数等于0,也就是这里线程state其实没有原来的意思了,只是用于count计数而已.<br>  通过上面acquireSharedInterruptibly方法我们可以看出,只要<br>tryAcquireShared大于0(即count还不是0)的话CDL的await()方法就没有阻塞,真正的阻塞实现是在doAcquireSharedInterruptibly(1)里面.这两个要具体分析就要扯到AQS的实现了,我们这里只要知道这里就是CDL产生阻塞的原因就行了.<br>分析完await()方法后,我们来看一下countDown():</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void countDown() &#123;</div><div class=\"line\">        sync.releaseShared(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里调用的依旧是sync父类里面的方法.在父类AQS里面的实现如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">       if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">           doReleaseShared();</div><div class=\"line\">           return true;</div><div class=\"line\">       &#125;</div><div class=\"line\">       return false;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  我们看到其实核心还是调用sync里面tryReleaseShared,<br>回到sync里面的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">           // Decrement count; signal when transition to zero</div><div class=\"line\">           for (;;) &#123;</div><div class=\"line\">               int c = getState(); (1)</div><div class=\"line\">               if (c == 0) (2)</div><div class=\"line\">                   return false; (3)</div><div class=\"line\">               int nextc = c-1; (4)</div><div class=\"line\">               if (compareAndSetState(c, nextc)) (5)</div><div class=\"line\">                   return nextc == 0; (6)</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>  这里没有使用锁来实现,而是通过CAS(即比较交换)算法来实现,CAS的具体实现是调用更底层的UnSafe类,我们只要知道这是一种不通过锁来实现同步的方法,所以相对比较高效.<br>1,2,3处表示先检查 count是否为0,也就是说到CDL不在阻塞的时候在调用countDown方法不会在起作用了,这也意味着CDL是不能重用的.<br>5,6处通过CAS方法使得count减1,当然这里其实不是真的count减了1,而是state,只是这里state就是代表了count的意思而已.<br>到这里为止,CDL的主要方法和原理都分析完了,我们看到其内部实现完全依靠Sync,也就是AQS,但这里Sync的实现也非常简练易懂.<br><strong>接下来我们来分析CB</strong><br>  虽然CB和CDL意思有些相似,但是实现上确不一样.<br>CB同样实现了一个内部类Generation,意为一代,但是主要功能还是通过reentranLock实现的.<br>先来看看CB源码里面定义的几个遍量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final ReentrantLock lock = new ReentrantLock();</div><div class=\"line\">private final Condition trip = lock.newCondition();</div><div class=\"line\">private final int parties;</div><div class=\"line\">private final Runnable barrierCommand;</div><div class=\"line\">private Generation generation = new Generation();</div><div class=\"line\">private int count;</div></pre></td></tr></table></figure>\n<p>lock用来加锁<br>trip这里英文不是旅游的意思,而是绊倒的意思,也许正好和Barrier(栅栏)相对应吧,栅栏几个栏杆挡着不给你走,来一个线程绊倒一个栏杆,倒完了路就通了.<br>parties 英文意党羽,代表这里需要挡住的线程数量,这个值在初始化后就不会变了,<br>barrierCommand:栅栏通了后就会执行这个命令.<br>generation意为一代,代表此刻这个栅栏<br>count 线程的数量,初始化时和parties相等</p>\n<p>再看CB的两个构造函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CyclicBarrier(int parties) &#123;</div><div class=\"line\">       this(parties, null);</div><div class=\"line\">   &#125;</div><div class=\"line\">   public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class=\"line\">       if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class=\"line\">       this.parties = parties;</div><div class=\"line\">       this.count = parties;</div><div class=\"line\">       this.barrierCommand = barrierAction;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  我们主要看第二个构造函数,初始化时parties赋值给了count,我们上面说的parties不会变的原因是程序最后修改的都是count.</p>\n<p>再来看CB的主要几个方法:<br>getPaties()获取要拦的线程的数量,返回的parties,也就是初始化的数量.</p>\n<p>isBroken()判断栅栏是否坏了,是通过lock锁实现的,返回的是Generation类里面唯一的变量broken,同时我们看看Generation类的定义,非常简单:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static class Generation &#123;</div><div class=\"line\">      boolean broken = false;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>这个内部类就持有一个bool变量,代表这个栅栏有没有坏掉(因为某些异常).</p>\n<p>reset() 重置栅栏,意思就是一切重新开始了,之前拦截的都不算数了.这也和CB的名字Cyclic(循环)相符,也是CB的最大特点,她是可以一直重复使用的.reset方法同样用了lock锁,核心调用了两个私有方法,breakBarrier()和nextGeneration() (破坏栅栏和生成新的栅栏)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void reset() &#123;</div><div class=\"line\">    final ReentrantLock lock = this.lock;</div><div class=\"line\">    lock.lock();</div><div class=\"line\">    try &#123;</div><div class=\"line\">        breakBarrier();   // break the current generation</div><div class=\"line\">        nextGeneration(); // start a new generation</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        lock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看看这俩个私有方法的实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void breakBarrier() &#123;</div><div class=\"line\">     generation.broken = true;</div><div class=\"line\">     count = parties;</div><div class=\"line\">     trip.signalAll();</div><div class=\"line\"> &#125;</div><div class=\"line\">private void nextGeneration() &#123;</div><div class=\"line\">     trip.signalAll();</div><div class=\"line\">     count = parties;</div><div class=\"line\">     generation = new Generation();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>  breakBarrier首先设置generation为坏掉的状态,然后重置count为初始化数量,最后通过trip这个Condition来通知所有的线程这个栅栏坏了.<br>  nextGeneration用在代表目前的栅栏坏掉或者目的达成了后,重新开始设置新的栅栏,先通过trip所有线程栅栏已经可以通过了,然后重置count,生成新的栅栏.<br>  最后我们看看核心的方法也就是用来拦住线程的await方法,这个方法有俩种 ,一个带有时间限制,一个不带,但是都只是调用了私有方法dowait,所以我们只要看dowait方法就行了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">private int dowait(boolean timed, long nanos)</div><div class=\"line\">       throws InterruptedException, BrokenBarrierException,</div><div class=\"line\">              TimeoutException &#123;</div><div class=\"line\">       final ReentrantLock lock = this.lock;</div><div class=\"line\">       lock.lock();</div><div class=\"line\">       try &#123;</div><div class=\"line\">           final Generation g = generation;</div><div class=\"line\"></div><div class=\"line\">           if (g.broken) (1)</div><div class=\"line\">               throw new BrokenBarrierException();</div><div class=\"line\"></div><div class=\"line\">           if (Thread.interrupted()) &#123; (2)</div><div class=\"line\">               breakBarrier();</div><div class=\"line\">               throw new InterruptedException();</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           int index = --count;(3)</div><div class=\"line\">           if (index == 0) &#123;  // tripped</div><div class=\"line\">               boolean ranAction = false;</div><div class=\"line\">               try &#123;</div><div class=\"line\">                   final Runnable command = barrierCommand;</div><div class=\"line\">                   if (command != null)</div><div class=\"line\">                       command.run();</div><div class=\"line\">                   ranAction = true;</div><div class=\"line\">                   nextGeneration();(4)</div><div class=\"line\">                   return 0;</div><div class=\"line\">               &#125; finally &#123;</div><div class=\"line\">                   if (!ranAction) (5)</div><div class=\"line\">                       breakBarrier();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // loop until tripped, broken, interrupted, or timed out</div><div class=\"line\">           for (;;) &#123;(6)</div><div class=\"line\">               try &#123;</div><div class=\"line\">                   if (!timed)</div><div class=\"line\">                       trip.await();</div><div class=\"line\">                   else if (nanos &gt; 0L)</div><div class=\"line\">                       nanos = trip.awaitNanos(nanos);</div><div class=\"line\">               &#125; catch (InterruptedException ie) &#123;</div><div class=\"line\">                   if (g == generation &amp;&amp; ! g.broken) &#123;(7)</div><div class=\"line\">                       breakBarrier();</div><div class=\"line\">                       throw ie;</div><div class=\"line\">                   &#125; else &#123;</div><div class=\"line\">                       // We&apos;re about to finish waiting even if we had not</div><div class=\"line\">                       // been interrupted, so this interrupt is deemed to</div><div class=\"line\">                       // &quot;belong&quot; to subsequent execution.</div><div class=\"line\">                       Thread.currentThread().interrupt();(8)</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               if (g.broken)</div><div class=\"line\">                   throw new BrokenBarrierException();</div><div class=\"line\"></div><div class=\"line\">               if (g != generation)</div><div class=\"line\">                   return index;</div><div class=\"line\"></div><div class=\"line\">               if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class=\"line\">                   breakBarrier();</div><div class=\"line\">                   throw new TimeoutException();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; finally &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  核心依然是用来lock锁来阻塞线程.<br>  我们先来看看这句代码 final Generation g = generation;讲这个意思是jdk很多地方都在方法内部通过final局部变量的方式引用全局变量,这样做的好处就是一是提高效率,二是对垃圾回收也有好处(不过这里的确需要一个g的局部变量,后面会讲到),这样的方式我看到了很多次,也算一种编程技巧吧.<br>  接下来的(1) (2)两处意思是如果栅栏坏了或者当前线程中断了都会导致栅栏失效,一切重来.(3)处的意思是每一个线程调用到await()时,count都会减少1,当减到0时(栅栏任务完成),接下来判断了是否有command命令需要执行.这些都完成后执行(4)处nextGeneration()重新生成栅栏.<br>  (5)处代表了在command运行的时候发生了某些异常,导致没有正常生成nextGeneration,那么就破坏栅栏,重新来过.<br>  最后我们看(6)处,这里通过一个for死循环来进行线程的阻塞判断操作,先是判断有没有设置时间限制,在线程阻塞时遇到InterruptedException(中断异常),捕获异常后里面有个if/else,<br>这里分为两种情况,一种是当前线程在await的时候出现了中断,一种是别的线程出现了中断操作.<br>1.当是别的线程中断时,在这个时候栅栏还没有生成新的generation且没坏,那么就需要当前线程破坏栅栏了.<br>2.当是自己的中断,异常捕获后,中断标记会被清除,所以需要再次主动中断恢复中断标记,这里jdk里面还专门做了解释,并说是属于后来的执行动作,也就是说是为了通知其他线程捕获异常来破坏栅栏.</p>\n<p>最后依然是对栅栏进行一些异常情况的判断.</p>\n<p>  至此CDL和CB都分析完了,也是自己的一些简单的理解,如若不对,请看到的人能耐心指教一下.下面贴出我写的一个中国式过马路的例子来将二者结合起来的用法供大家参考.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person implements Runnable &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate TrafficLight light;</div><div class=\"line\">\tprivate String name;</div><div class=\"line\"></div><div class=\"line\">\tpublic Person(TrafficLight light) &#123;</div><div class=\"line\">\t\tthis.light = light;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setName(String name) &#123;</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\tSystem.out.println(name + &quot;等红灯中.....&quot;);</div><div class=\"line\">\t\tlight.peopleWaitRedLight();</div><div class=\"line\">\t\tSystem.out.println(name + &quot;过马路....哒哒哒...&quot;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Driver implements Runnable &#123;</div><div class=\"line\">\tprivate TrafficLight light;</div><div class=\"line\"></div><div class=\"line\">\tpublic Driver(TrafficLight light) &#123;</div><div class=\"line\">\t\tthis.light = light;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;司机等红灯中...烦烦烦...&quot;);</div><div class=\"line\">\t\tlight.driverWaitRedLight();</div><div class=\"line\">\t\tSystem.out.println(&quot;司机过马路喽...嘟嘟嘟...&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TrafficLight &#123;</div><div class=\"line\">\tprivate CyclicBarrier barrier;</div><div class=\"line\">\tprivate CountDownLatch latch;</div><div class=\"line\"></div><div class=\"line\">\tpublic TrafficLight(CyclicBarrier barrier, CountDownLatch latch) &#123;</div><div class=\"line\">\t\tthis.barrier = barrier;</div><div class=\"line\">\t\tthis.latch = latch;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void driverWaitRedLight() &#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\tlatch.await();</div><div class=\"line\">\t\t\tThread.sleep(1);// 让人完全走过去</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void peopleWaitRedLight() &#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tthis.barrier.await();</div><div class=\"line\">\t\t\tSystem.out.println(&quot;凑够数了,大家一起闯红灯了.&quot;);</div><div class=\"line\">\t\t&#125; catch (InterruptedException | BrokenBarrierException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; finally &#123;</div><div class=\"line\">\t\t\tif (latch != null) &#123;</div><div class=\"line\">\t\t\t\tlatch.countDown();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">main函数</div><div class=\"line\">\tpublic static void main(String args[]) throws Exception &#123;</div><div class=\"line\">\t\tList&lt;Person&gt; list = new ArrayList&lt;&gt;();</div><div class=\"line\">\t\tCyclicBarrier barrier = new CyclicBarrier(5);</div><div class=\"line\">\t\tCountDownLatch latch = new CountDownLatch(10);</div><div class=\"line\">\t\tTrafficLight light = new TrafficLight(barrier, latch);</div><div class=\"line\">\t\tfor (int i = 1; i &lt;= 10; i++) &#123;</div><div class=\"line\">\t\t\tlist.add(new Person(light));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tDriver driver = new Driver(light);</div><div class=\"line\">\t\tnew Thread(driver).start();</div><div class=\"line\">\t\tThread t = null;</div><div class=\"line\">\t\tfor (Person p : list) &#123;</div><div class=\"line\">\t\t\tp.setName(&quot;p&quot; + (list.indexOf(p) + 1));</div><div class=\"line\">\t\t\tt = new Thread(p);</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t\tThread.sleep(500);// 每过500ms来一个人</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>   学concurrent并发包的时候,看到countDownLatch和CyclicBarrier有些相似的地方.所以放在一起进行学习分析一下.<br>  首先看一下jdk注释的第一句话简单阐明二者各自的意思:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">CountDowLatch</div><div class=\"line\">A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes</div><div class=\"line\"></div><div class=\"line\">CyclicBarrier</div><div class=\"line\">A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point</div></pre></td></tr></table></figure>","more":"<p>  简单的意思就是CountDownLatch(下文用CDL)用于同步时一个或多个线程等待其他线程的某些操作完后才继续进行,而CyclicBarrier(下文用CB)用于若干线程需要阻塞在一个地方,够数了然后在同时进行.<br> <strong>先分析CDL</strong>.<br>   用法上CDL初始化必须带有一个count,表示需要countDown方法需要调用几次后才能接着进行.<br>   主要的api有:<br> countDown(). 用来其他线程调用,没调用一次count–,直到为0后,CDL作用消失,线程继续进行</p>\n<p> await().用于线程设置在哪个地方设置阻塞等待,类似对象的wait()函数.</p>\n<p>   所以基本的用法伪代码如下:<br> CDL latch = new CDL(2);<br> thread A {<br>      ……<br>      latch.await();<br>      …….<br> }<br> thread B {<br>     ……<br>     latch.countDown();<br>     ……<br> }<br> thread C {<br>     ……<br>     latch.countDown();<br>     ……<br> }<br>  这样在thread B ,C都调用过countDown()后,A才能继续进行.<br>然后,我们通过看一下源码来理解一下其中的过程.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CountDownLatch(int count) &#123;</div><div class=\"line\">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class=\"line\">    this.sync = new Sync(count);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  构造方异法里面我们看到其实是实现了内部类Sync,这个类其实是继承了AbstractQueuedSynchronizer即AQS,这是并发包里面很多类实现的基础.这里留着改天深入研究一下.我们先看看这个Sync的实现.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sync(int count) &#123;</div><div class=\"line\">           setState(count);</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       int getCount() &#123;</div><div class=\"line\">           return getState();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">           return (getState() == 0) ? 1 : -1;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">           // Decrement count; signal when transition to zero</div><div class=\"line\">           for (;;) &#123;</div><div class=\"line\">               int c = getState();</div><div class=\"line\">               if (c == 0)</div><div class=\"line\">                   return false;</div><div class=\"line\">               int nextc = c-1;</div><div class=\"line\">               if (compareAndSetState(c, nextc))</div><div class=\"line\">                   return nextc == 0;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>  我们通过Sync的方法来看await()源码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void await() throws InterruptedException &#123;</div><div class=\"line\">       sync.acquireSharedInterruptibly(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里sync调用的方法其实是父类AQS里面的方法,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireSharedInterruptibly(int arg)</div><div class=\"line\">         throws InterruptedException &#123;</div><div class=\"line\">     if (Thread.interrupted())</div><div class=\"line\">         throw new InterruptedException();</div><div class=\"line\">     if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">         doAcquireSharedInterruptibly(arg);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>  我们看到其实这里还是通过调用tryAcquireShared方法实现的,而在AQS里面tryAcquireShared方法还是需要子类实现的,也就是最后调用的就是Sync里面的tryAcquireShared,我们回到Sync源码里面.<br>这个Sync在构造函数里面设置线程state就是count,<br>  再看tryAcquireShared方法,里面的形参acquires其实根本没用到,只是判断了state即count数等于0,也就是这里线程state其实没有原来的意思了,只是用于count计数而已.<br>  通过上面acquireSharedInterruptibly方法我们可以看出,只要<br>tryAcquireShared大于0(即count还不是0)的话CDL的await()方法就没有阻塞,真正的阻塞实现是在doAcquireSharedInterruptibly(1)里面.这两个要具体分析就要扯到AQS的实现了,我们这里只要知道这里就是CDL产生阻塞的原因就行了.<br>分析完await()方法后,我们来看一下countDown():</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void countDown() &#123;</div><div class=\"line\">        sync.releaseShared(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里调用的依旧是sync父类里面的方法.在父类AQS里面的实现如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">       if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">           doReleaseShared();</div><div class=\"line\">           return true;</div><div class=\"line\">       &#125;</div><div class=\"line\">       return false;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  我们看到其实核心还是调用sync里面tryReleaseShared,<br>回到sync里面的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">           // Decrement count; signal when transition to zero</div><div class=\"line\">           for (;;) &#123;</div><div class=\"line\">               int c = getState(); (1)</div><div class=\"line\">               if (c == 0) (2)</div><div class=\"line\">                   return false; (3)</div><div class=\"line\">               int nextc = c-1; (4)</div><div class=\"line\">               if (compareAndSetState(c, nextc)) (5)</div><div class=\"line\">                   return nextc == 0; (6)</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>  这里没有使用锁来实现,而是通过CAS(即比较交换)算法来实现,CAS的具体实现是调用更底层的UnSafe类,我们只要知道这是一种不通过锁来实现同步的方法,所以相对比较高效.<br>1,2,3处表示先检查 count是否为0,也就是说到CDL不在阻塞的时候在调用countDown方法不会在起作用了,这也意味着CDL是不能重用的.<br>5,6处通过CAS方法使得count减1,当然这里其实不是真的count减了1,而是state,只是这里state就是代表了count的意思而已.<br>到这里为止,CDL的主要方法和原理都分析完了,我们看到其内部实现完全依靠Sync,也就是AQS,但这里Sync的实现也非常简练易懂.<br><strong>接下来我们来分析CB</strong><br>  虽然CB和CDL意思有些相似,但是实现上确不一样.<br>CB同样实现了一个内部类Generation,意为一代,但是主要功能还是通过reentranLock实现的.<br>先来看看CB源码里面定义的几个遍量:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final ReentrantLock lock = new ReentrantLock();</div><div class=\"line\">private final Condition trip = lock.newCondition();</div><div class=\"line\">private final int parties;</div><div class=\"line\">private final Runnable barrierCommand;</div><div class=\"line\">private Generation generation = new Generation();</div><div class=\"line\">private int count;</div></pre></td></tr></table></figure>\n<p>lock用来加锁<br>trip这里英文不是旅游的意思,而是绊倒的意思,也许正好和Barrier(栅栏)相对应吧,栅栏几个栏杆挡着不给你走,来一个线程绊倒一个栏杆,倒完了路就通了.<br>parties 英文意党羽,代表这里需要挡住的线程数量,这个值在初始化后就不会变了,<br>barrierCommand:栅栏通了后就会执行这个命令.<br>generation意为一代,代表此刻这个栅栏<br>count 线程的数量,初始化时和parties相等</p>\n<p>再看CB的两个构造函数:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CyclicBarrier(int parties) &#123;</div><div class=\"line\">       this(parties, null);</div><div class=\"line\">   &#125;</div><div class=\"line\">   public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class=\"line\">       if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class=\"line\">       this.parties = parties;</div><div class=\"line\">       this.count = parties;</div><div class=\"line\">       this.barrierCommand = barrierAction;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  我们主要看第二个构造函数,初始化时parties赋值给了count,我们上面说的parties不会变的原因是程序最后修改的都是count.</p>\n<p>再来看CB的主要几个方法:<br>getPaties()获取要拦的线程的数量,返回的parties,也就是初始化的数量.</p>\n<p>isBroken()判断栅栏是否坏了,是通过lock锁实现的,返回的是Generation类里面唯一的变量broken,同时我们看看Generation类的定义,非常简单:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static class Generation &#123;</div><div class=\"line\">      boolean broken = false;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>这个内部类就持有一个bool变量,代表这个栅栏有没有坏掉(因为某些异常).</p>\n<p>reset() 重置栅栏,意思就是一切重新开始了,之前拦截的都不算数了.这也和CB的名字Cyclic(循环)相符,也是CB的最大特点,她是可以一直重复使用的.reset方法同样用了lock锁,核心调用了两个私有方法,breakBarrier()和nextGeneration() (破坏栅栏和生成新的栅栏)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void reset() &#123;</div><div class=\"line\">    final ReentrantLock lock = this.lock;</div><div class=\"line\">    lock.lock();</div><div class=\"line\">    try &#123;</div><div class=\"line\">        breakBarrier();   // break the current generation</div><div class=\"line\">        nextGeneration(); // start a new generation</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        lock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看看这俩个私有方法的实现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void breakBarrier() &#123;</div><div class=\"line\">     generation.broken = true;</div><div class=\"line\">     count = parties;</div><div class=\"line\">     trip.signalAll();</div><div class=\"line\"> &#125;</div><div class=\"line\">private void nextGeneration() &#123;</div><div class=\"line\">     trip.signalAll();</div><div class=\"line\">     count = parties;</div><div class=\"line\">     generation = new Generation();</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>  breakBarrier首先设置generation为坏掉的状态,然后重置count为初始化数量,最后通过trip这个Condition来通知所有的线程这个栅栏坏了.<br>  nextGeneration用在代表目前的栅栏坏掉或者目的达成了后,重新开始设置新的栅栏,先通过trip所有线程栅栏已经可以通过了,然后重置count,生成新的栅栏.<br>  最后我们看看核心的方法也就是用来拦住线程的await方法,这个方法有俩种 ,一个带有时间限制,一个不带,但是都只是调用了私有方法dowait,所以我们只要看dowait方法就行了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">private int dowait(boolean timed, long nanos)</div><div class=\"line\">       throws InterruptedException, BrokenBarrierException,</div><div class=\"line\">              TimeoutException &#123;</div><div class=\"line\">       final ReentrantLock lock = this.lock;</div><div class=\"line\">       lock.lock();</div><div class=\"line\">       try &#123;</div><div class=\"line\">           final Generation g = generation;</div><div class=\"line\"></div><div class=\"line\">           if (g.broken) (1)</div><div class=\"line\">               throw new BrokenBarrierException();</div><div class=\"line\"></div><div class=\"line\">           if (Thread.interrupted()) &#123; (2)</div><div class=\"line\">               breakBarrier();</div><div class=\"line\">               throw new InterruptedException();</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           int index = --count;(3)</div><div class=\"line\">           if (index == 0) &#123;  // tripped</div><div class=\"line\">               boolean ranAction = false;</div><div class=\"line\">               try &#123;</div><div class=\"line\">                   final Runnable command = barrierCommand;</div><div class=\"line\">                   if (command != null)</div><div class=\"line\">                       command.run();</div><div class=\"line\">                   ranAction = true;</div><div class=\"line\">                   nextGeneration();(4)</div><div class=\"line\">                   return 0;</div><div class=\"line\">               &#125; finally &#123;</div><div class=\"line\">                   if (!ranAction) (5)</div><div class=\"line\">                       breakBarrier();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           // loop until tripped, broken, interrupted, or timed out</div><div class=\"line\">           for (;;) &#123;(6)</div><div class=\"line\">               try &#123;</div><div class=\"line\">                   if (!timed)</div><div class=\"line\">                       trip.await();</div><div class=\"line\">                   else if (nanos &gt; 0L)</div><div class=\"line\">                       nanos = trip.awaitNanos(nanos);</div><div class=\"line\">               &#125; catch (InterruptedException ie) &#123;</div><div class=\"line\">                   if (g == generation &amp;&amp; ! g.broken) &#123;(7)</div><div class=\"line\">                       breakBarrier();</div><div class=\"line\">                       throw ie;</div><div class=\"line\">                   &#125; else &#123;</div><div class=\"line\">                       // We&apos;re about to finish waiting even if we had not</div><div class=\"line\">                       // been interrupted, so this interrupt is deemed to</div><div class=\"line\">                       // &quot;belong&quot; to subsequent execution.</div><div class=\"line\">                       Thread.currentThread().interrupt();(8)</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               if (g.broken)</div><div class=\"line\">                   throw new BrokenBarrierException();</div><div class=\"line\"></div><div class=\"line\">               if (g != generation)</div><div class=\"line\">                   return index;</div><div class=\"line\"></div><div class=\"line\">               if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class=\"line\">                   breakBarrier();</div><div class=\"line\">                   throw new TimeoutException();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; finally &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  核心依然是用来lock锁来阻塞线程.<br>  我们先来看看这句代码 final Generation g = generation;讲这个意思是jdk很多地方都在方法内部通过final局部变量的方式引用全局变量,这样做的好处就是一是提高效率,二是对垃圾回收也有好处(不过这里的确需要一个g的局部变量,后面会讲到),这样的方式我看到了很多次,也算一种编程技巧吧.<br>  接下来的(1) (2)两处意思是如果栅栏坏了或者当前线程中断了都会导致栅栏失效,一切重来.(3)处的意思是每一个线程调用到await()时,count都会减少1,当减到0时(栅栏任务完成),接下来判断了是否有command命令需要执行.这些都完成后执行(4)处nextGeneration()重新生成栅栏.<br>  (5)处代表了在command运行的时候发生了某些异常,导致没有正常生成nextGeneration,那么就破坏栅栏,重新来过.<br>  最后我们看(6)处,这里通过一个for死循环来进行线程的阻塞判断操作,先是判断有没有设置时间限制,在线程阻塞时遇到InterruptedException(中断异常),捕获异常后里面有个if/else,<br>这里分为两种情况,一种是当前线程在await的时候出现了中断,一种是别的线程出现了中断操作.<br>1.当是别的线程中断时,在这个时候栅栏还没有生成新的generation且没坏,那么就需要当前线程破坏栅栏了.<br>2.当是自己的中断,异常捕获后,中断标记会被清除,所以需要再次主动中断恢复中断标记,这里jdk里面还专门做了解释,并说是属于后来的执行动作,也就是说是为了通知其他线程捕获异常来破坏栅栏.</p>\n<p>最后依然是对栅栏进行一些异常情况的判断.</p>\n<p>  至此CDL和CB都分析完了,也是自己的一些简单的理解,如若不对,请看到的人能耐心指教一下.下面贴出我写的一个中国式过马路的例子来将二者结合起来的用法供大家参考.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Person implements Runnable &#123;</div><div class=\"line\"></div><div class=\"line\">\tprivate TrafficLight light;</div><div class=\"line\">\tprivate String name;</div><div class=\"line\"></div><div class=\"line\">\tpublic Person(TrafficLight light) &#123;</div><div class=\"line\">\t\tthis.light = light;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void setName(String name) &#123;</div><div class=\"line\">\t\tthis.name = name;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\tSystem.out.println(name + &quot;等红灯中.....&quot;);</div><div class=\"line\">\t\tlight.peopleWaitRedLight();</div><div class=\"line\">\t\tSystem.out.println(name + &quot;过马路....哒哒哒...&quot;);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Driver implements Runnable &#123;</div><div class=\"line\">\tprivate TrafficLight light;</div><div class=\"line\"></div><div class=\"line\">\tpublic Driver(TrafficLight light) &#123;</div><div class=\"line\">\t\tthis.light = light;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void run() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;司机等红灯中...烦烦烦...&quot;);</div><div class=\"line\">\t\tlight.driverWaitRedLight();</div><div class=\"line\">\t\tSystem.out.println(&quot;司机过马路喽...嘟嘟嘟...&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class TrafficLight &#123;</div><div class=\"line\">\tprivate CyclicBarrier barrier;</div><div class=\"line\">\tprivate CountDownLatch latch;</div><div class=\"line\"></div><div class=\"line\">\tpublic TrafficLight(CyclicBarrier barrier, CountDownLatch latch) &#123;</div><div class=\"line\">\t\tthis.barrier = barrier;</div><div class=\"line\">\t\tthis.latch = latch;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void driverWaitRedLight() &#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\tlatch.await();</div><div class=\"line\">\t\t\tThread.sleep(1);// 让人完全走过去</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void peopleWaitRedLight() &#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tthis.barrier.await();</div><div class=\"line\">\t\t\tSystem.out.println(&quot;凑够数了,大家一起闯红灯了.&quot;);</div><div class=\"line\">\t\t&#125; catch (InterruptedException | BrokenBarrierException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; finally &#123;</div><div class=\"line\">\t\t\tif (latch != null) &#123;</div><div class=\"line\">\t\t\t\tlatch.countDown();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">main函数</div><div class=\"line\">\tpublic static void main(String args[]) throws Exception &#123;</div><div class=\"line\">\t\tList&lt;Person&gt; list = new ArrayList&lt;&gt;();</div><div class=\"line\">\t\tCyclicBarrier barrier = new CyclicBarrier(5);</div><div class=\"line\">\t\tCountDownLatch latch = new CountDownLatch(10);</div><div class=\"line\">\t\tTrafficLight light = new TrafficLight(barrier, latch);</div><div class=\"line\">\t\tfor (int i = 1; i &lt;= 10; i++) &#123;</div><div class=\"line\">\t\t\tlist.add(new Person(light));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tDriver driver = new Driver(light);</div><div class=\"line\">\t\tnew Thread(driver).start();</div><div class=\"line\">\t\tThread t = null;</div><div class=\"line\">\t\tfor (Person p : list) &#123;</div><div class=\"line\">\t\t\tp.setName(&quot;p&quot; + (list.indexOf(p) + 1));</div><div class=\"line\">\t\t\tt = new Thread(p);</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t\tThread.sleep(500);// 每过500ms来一个人</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1nbxdtm0000tojtir8yspyu","category_id":"cj1nbxdu20004tojt60740xlh","_id":"cj1nbxduh000dtojtgwelptyt"},{"post_id":"cj1nbxdu20002tojtsxkpjgh9","category_id":"cj1nbxduh000atojt54qpxsii","_id":"cj1nbxduh000jtojtgmi9l53r"},{"post_id":"cj1nbxduh000htojt76k061gg","category_id":"cj1nbxduh000ftojtv9l1r6m4","_id":"cj1nbxdux000otojtwhlic3ty"},{"post_id":"cj1nbxduh0006tojt10cku105","category_id":"cj1nbxduh000ftojtv9l1r6m4","_id":"cj1nbxdux000qtojtf108d9gr"},{"post_id":"cj1nbxduh0008tojtwhksnsl1","category_id":"cj1nbxduh000atojt54qpxsii","_id":"cj1nbxdux000ttojtuhjcje6g"},{"post_id":"cj1nbxduh0009tojtltza3xpn","category_id":"cj1nbxduh000ftojtv9l1r6m4","_id":"cj1nbxdux000xtojtueckxc2u"},{"post_id":"cj1nbxduh000ctojty2j0gcus","category_id":"cj1nbxduh000ftojtv9l1r6m4","_id":"cj1nbxdux0011tojtvyh0vblb"},{"post_id":"cj1nbxduh000etojtbzoknsas","category_id":"cj1nbxdux000ytojtuuqvklcy","_id":"cj1nbxdux0014tojtlpzlyc3o"}],"PostTag":[{"post_id":"cj1nbxdtm0000tojtir8yspyu","tag_id":"cj1nbxduh0005tojt0zoxe2y6","_id":"cj1nbxduh000itojtkhfw4egh"},{"post_id":"cj1nbxdtm0000tojtir8yspyu","tag_id":"cj1nbxduh000btojtzbj2pv71","_id":"cj1nbxduh000ktojtxnhzkd8f"},{"post_id":"cj1nbxdu20002tojtsxkpjgh9","tag_id":"cj1nbxduh000gtojt4v3rj3ao","_id":"cj1nbxdux000ntojtrfdvexbj"},{"post_id":"cj1nbxduh0006tojt10cku105","tag_id":"cj1nbxdux000mtojtxkzk46ef","_id":"cj1nbxdux000stojtt656ucue"},{"post_id":"cj1nbxduh0008tojtwhksnsl1","tag_id":"cj1nbxduh000gtojt4v3rj3ao","_id":"cj1nbxdux000wtojto6p2ufs5"},{"post_id":"cj1nbxduh0009tojtltza3xpn","tag_id":"cj1nbxdux000vtojtw9et72rq","_id":"cj1nbxdux0010tojtwy2mzs4q"},{"post_id":"cj1nbxduh000ctojty2j0gcus","tag_id":"cj1nbxdux000ztojt7zavxmln","_id":"cj1nbxdux0013tojtyiig9bjr"},{"post_id":"cj1nbxduh000etojtbzoknsas","tag_id":"cj1nbxdux0012tojtufitagbl","_id":"cj1nbxdux0016tojt2d2wnuas"},{"post_id":"cj1nbxduh000htojt76k061gg","tag_id":"cj1nbxdux0015tojt3sx9vr5d","_id":"cj1nbxdux0017tojt258zrl7u"}],"Tag":[{"name":"spring","_id":"cj1nbxduh0005tojt0zoxe2y6"},{"name":"static","_id":"cj1nbxduh000btojtzbj2pv71"},{"name":"mysql","_id":"cj1nbxduh000gtojt4v3rj3ao"},{"name":"finally","_id":"cj1nbxdux000mtojtxkzk46ef"},{"name":"interrupt","_id":"cj1nbxdux000vtojtw9et72rq"},{"name":"list","_id":"cj1nbxdux000ztojt7zavxmln"},{"name":"ajax","_id":"cj1nbxdux0012tojtufitagbl"},{"name":"java","_id":"cj1nbxdux0015tojt3sx9vr5d"}]}}